//-----------------------------------------------------------------------------
// Copyright 2007 Jonathan Westhues
//
// This file is part of LDmicro.
//
// LDmicro is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LDmicro is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with LDmicro.  If not, see <http://www.gnu.org/licenses/>.
//------
//
// The table of supported MCUs, used to determine where the IOs are, what
// instruction set, what init code, etc.
// Jonathan Westhues, Oct 2004
//-----------------------------------------------------------------------------
#ifndef __MCUTABLE_H__
#define __MCUTABLE_H__

#include "stdafx.h"

#include "ldconfig.h"
#include "mcutable.hpp"

// clang-format off

//-----------------------------------------------------------------------------
// AT90USB647( AT90USB646 should also work but I do not have hardware to test ).
McuIoPinInfo AvrAT90USB647_64TQFPIoPinInfo[] = {
    { 'E',  6,  1, "", 0, "", 0, 0, 0, 0  },
    { 'E',  7,  2, "", 0, "", 0, 0, 0, 0  },

    { 'E',  3,  9, "", 0, "", 0, 0, 0, 0 },

    { 'B',  0, 10, "", 0, "", 0, 0, 0, 0 },
    { 'B',  1, 11, "", 0, "", 0, 0, 0, 0 },
    { 'B',  2, 12, "", 0, "", 0, 0, 0, 0 },
    { 'B',  3, 13, "", 0, "", 0, 0, 0, 0 },
    { 'B',  4, 14, "", 0, "", 0, 0, 0, 0 },
    { 'B',  5, 15, "", 0, "", 0, 0, 0, 0 },
    { 'B',  6, 16, "", 0, "", 0, 0, 0, 0 },
    { 'B',  7, 17, "", 0, "", 0, 0, 0, 0 },

    { 'E',  4, 18, "", 0, "", 0, 0, 0, 0 },
    { 'E',  5, 19, "", 0, "", 0, 0, 0, 0 },

    { 'D',  0, 25, "", 0, "", 0, 0, 0, 0 },
    { 'D',  1, 26, "", 0, "", 0, 0, 0, 0 },
    { 'D',  2, 27, "", 0, "", 0, 0, 0, 0 },
    { 'D',  3, 28, "", 0, "", 0, 0, 0, 0 },
    { 'D',  4, 29, "", 0, "", 0, 0, 0, 0 },
    { 'D',  5, 30, "", 0, "", 0, 0, 0, 0 },
    { 'D',  6, 31, "", 0, "", 0, 0, 0, 0 },
    { 'D',  7, 32, "", 0, "", 0, 0, 0, 0 },

    { 'E',  0, 33, "", 0, "", 0, 0, 0, 0 },
    { 'E',  1, 34, "", 0, "", 0, 0, 0, 0 },

    { 'C',  0, 35, "", 0, "", 0, 0, 0, 0 },
    { 'C',  1, 36, "", 0, "", 0, 0, 0, 0 },
    { 'C',  2, 37, "", 0, "", 0, 0, 0, 0 },
    { 'C',  3, 38, "", 0, "", 0, 0, 0, 0 },
    { 'C',  4, 39, "", 0, "", 0, 0, 0, 0 },
    { 'C',  5, 40, "", 0, "", 0, 0, 0, 0 },
    { 'C',  6, 41, "", 0, "", 0, 0, 0, 0 },
    { 'C',  7, 42, "", 0, "", 0, 0, 0, 0 },

    { 'E',  2, 43, "", 0, "", 0, 0, 0, 0 },

    { 'A',  7, 44, "", 0, "", 0, 0, 0, 0 },
    { 'A',  6, 45, "", 0, "", 0, 0, 0, 0 },
    { 'A',  5, 46, "", 0, "", 0, 0, 0, 0 },
    { 'A',  4, 47, "", 0, "", 0, 0, 0, 0 },
    { 'A',  3, 48, "", 0, "", 0, 0, 0, 0 },
    { 'A',  2, 49, "", 0, "", 0, 0, 0, 0 },
    { 'A',  1, 50, "", 0, "", 0, 0, 0, 0 },
    { 'A',  0, 51, "", 0, "", 0, 0, 0, 0 },

    { 'F',  7, 54, "", 0, "", 0, 0, 0, 0 },
    { 'F',  6, 55, "", 0, "", 0, 0, 0, 0 },
    { 'F',  5, 56, "", 0, "", 0, 0, 0, 0 },
    { 'F',  4, 57, "", 0, "", 0, 0, 0, 0 },
    { 'F',  3, 58, "", 0, "", 0, 0, 0, 0 },
    { 'F',  2, 59, "", 0, "", 0, 0, 0, 0 },
    { 'F',  1, 60, "", 0, "", 0, 0, 0, 0 },
    { 'F',  0, 61, "", 0, "", 0, 0, 0, 0 },
};

McuAdcPinInfo AvrAT90USB647_64TQFPAdcPinInfo[] = {
    { 61, 0x00 },
    { 60, 0x01 },
    { 59, 0x02 },
    { 58, 0x03 },
    { 57, 0x04 },
    { 56, 0x05 },
    { 55, 0x06 },
    { 54, 0x07 },
};

//-----------------------------------------------------------------------------
// ATmega2560
McuIoPinInfo AvrAtmega2560_100TQFPIoPinInfo[] = {
//   port bit pin  pinName          ArduinoPin  ArduinoName
//                                              Mega/Mega2560
    { 'E',  0,  2, "PE0 (RXD0/PCINT8)",      0, "0; //RX"       , 0, 0, 0, 0},
    { 'E',  1,  3, "PE1 (TXD0)",             0, "1; //TX"       , 0, 0, 0, 0},
    { 'E',  2,  4, "PE2 (AIN0/XCK0)",        0, ""              , 0, 0, 0, 0},
    { 'E',  3,  5, "PE3 (AIN1/OC3A)",        0, "5; //PWM~"     , 0, 0, 0, 0},
    { 'E',  4,  6, "PE4 (INT4/OC3B)",        0, "2; //PWM~"     , 0, 0, 0, 0},
    { 'E',  5,  7, "PE5 (INT5/OC3C)",        0, "3; //PWM~"     , 0, 0, 0, 0},
    { 'E',  6,  8, "PE6 (INT6/T3)",          0, ""              , 0, 0, 0, 0},
    { 'E',  7,  9, "PE7 (INT7/CLKO/ICP3)",   0, ""              , 0, 0, 0, 0},

    { 'H',  0, 12, "PH0 (RXD2)"            , 0, "17; //RX2"     , 0, 0, 0, 0},
    { 'H',  1, 13, "PH1 (TXD2)"            , 0, "16; //TX2"     , 0, 0, 0, 0},
    { 'H',  2, 14, "PH2 (XCK2)"            , 0, ""              , 0, 0, 0, 0},
    { 'H',  3, 15, "PH3 (OC4A)"            , 0, "6; //PWM~"     , 0, 0, 0, 0},
    { 'H',  4, 16, "PH4 (OC4B)"            , 0, "7; //PWM~"     , 0, 0, 0, 0},
    { 'H',  5, 17, "PH5 (OC4C)"            , 0, "8; //PWM~"     , 0, 0, 0, 0},
    { 'H',  6, 18, "PH6 (OC2B)"            , 0, "9; //PWM~"     , 0, 0, 0, 0},
    { 'H',  7, 27, "PH7 (T4)"              , 0, ""              , 0, 0, 0, 0},

    { 'B',  0, 19, "PB0 (PCINT0/_SS)"      , 0, "53"            , 0, 0, 0, 0},
    { 'B',  1, 20, "PB1 (PCINT1/SCK)"      , 0, "52"            , 0, 0, 0, 0},
    { 'B',  2, 21, "PB2 (PCINT2/MOSI)"     , 0, "51"            , 0, 0, 0, 0},
    { 'B',  3, 22, "PB3 (PCINT3/MISO)"     , 0, "50"            , 0, 0, 0, 0},
    { 'B',  4, 23, "PB4 (PCINT4/OC2A)"     , 0, "10; //PWM~"    , 0, 0, 0, 0},
    { 'B',  5, 24, "PB5 (PCINT5/OC1A)"     , 0, "11; //PWM~"    , 0, 0, 0, 0},
    { 'B',  6, 25, "PB6 (PCINT6/OC1B)"     , 0, "12; //PWM~"    , 0, 0, 0, 0},
    { 'B',  7, 26, "PB7 (PCINT7/OC1C/OC0A)", 0, "13; //PWM~"    , 0, 0, 0, 0},

    { 'L',  0, 35, "PL0 (ICP4)"            , 0, "49"            , 0, 0, 0, 0},
    { 'L',  1, 36, "PL1 (ICP5)"            , 0, "48"            , 0, 0, 0, 0},
    { 'L',  2, 37, "PL2 (T5)"              , 0, "47"            , 0, 0, 0, 0},
    { 'L',  3, 38, "PL3 (OC5A)"            , 0, "46"            , 0, 0, 0, 0},
    { 'L',  4, 39, "PL4 (OC5B)"            , 0, "45"            , 0, 0, 0, 0},
    { 'L',  5, 40, "PL5 (OC5C)"            , 0, "44"            , 0, 0, 0, 0},
    { 'L',  6, 41, "PL6"                   , 0, "43"            , 0, 0, 0, 0},
    { 'L',  7, 42, "PL7"                   , 0, "42"            , 0, 0, 0, 0},

    { 'D',  0, 43, "PD0 (INT0/SCL)",         0, "21; //SCL"     , 0, 0, 0, 0},
    { 'D',  1, 44, "PD1 (INT1/SDA)",         0, "20; //SDA"     , 0, 0, 0, 0},
    { 'D',  2, 45, "PD2 (INT2/RXD1)",        0, "19; //RX1"     , 0, 0, 0, 0},
    { 'D',  3, 46, "PD3 (INT3/TXD1)",        0, "18; //TX1"     , 0, 0, 0, 0},
    { 'D',  4, 47, "PD4 (ICP1)",             0, ""              , 0, 0, 0, 0},
    { 'D',  5, 48, "PD5 (XCK1)",             0, ""              , 0, 0, 0, 0},
    { 'D',  6, 49, "PD6 (T1)",               0, ""              , 0, 0, 0, 0},
    { 'D',  7, 50, "PD7 (T0)",               0, "38"            , 0, 0, 0, 0},

    { 'G',  0, 51, "PG0 (_WR)"             , 0, "41"            , 0, 0, 0, 0},
    { 'G',  1, 52, "PG1 (_RD)"             , 0, "40"            , 0, 0, 0, 0},
    { 'G',  2, 70, "PG2 (ALE)"             , 0, "39"            , 0, 0, 0, 0},
    { 'G',  3, 28, "PG3 (TOSC2)"           , 0, ""              , 0, 0, 0, 0},
    { 'G',  4, 29, "PG4 (TOSC1)"           , 0, ""              , 0, 0, 0, 0},
    { 'G',  5,  1, "PG5 (OC0B)"            , 0, "4; //PWM~"     , 0, 0, 0, 0},

    { 'C',  0, 53, "PC0 (A8)",               0, "37"            , 0, 0, 0, 0},
    { 'C',  1, 54, "PC1 (A9)",               0, "36"            , 0, 0, 0, 0},
    { 'C',  2, 55, "PC2 (A10)",              0, "35"            , 0, 0, 0, 0},
    { 'C',  3, 56, "PC3 (A11)",              0, "34"            , 0, 0, 0, 0},
    { 'C',  4, 57, "PC4 (A12)",              0, "33"            , 0, 0, 0, 0},
    { 'C',  5, 58, "PC5 (A13)",              0, "32"            , 0, 0, 0, 0},
    { 'C',  6, 59, "PC6 (A14)",              0, "31"            , 0, 0, 0, 0},
    { 'C',  7, 60, "PC7 (A15)",              0, "30"            , 0, 0, 0, 0},

    { 'J',  0, 63, "PJ0 (PCINT9/RXD3)"     , 0, "15; //RX3"     , 0, 0, 0, 0},
    { 'J',  1, 64, "PJ1 (PCINT10/TXD3)"    , 0, "14; //TX3"     , 0, 0, 0, 0},
    { 'J',  2, 65, "PJ2 (PCINT11/XCK3)"    , 0, ""              , 0, 0, 0, 0},
    { 'J',  3, 66, "PJ3 (PCINT12)"         , 0, ""              , 0, 0, 0, 0},
    { 'J',  4, 67, "PJ4 (PCINT13)"         , 0, ""              , 0, 0, 0, 0},
    { 'J',  5, 68, "PJ5 (PCINT14)"         , 0, ""              , 0, 0, 0, 0},
    { 'J',  6, 69, "PJ6 (PCINT15)"         , 0, ""              , 0, 0, 0, 0},
    { 'J',  7, 79, "PJ7"                   , 0, ""              , 0, 0, 0, 0},

    { 'A',  0, 78, "PA0 (AD8)",              0, "22"            , 0, 0, 0, 0},
    { 'A',  1, 77, "PA1 (AD9)",              0, "23"            , 0, 0, 0, 0},
    { 'A',  2, 76, "PA2 (AD10)",             0, "24"            , 0, 0, 0, 0},
    { 'A',  3, 75, "PA3 (AD11)",             0, "25"            , 0, 0, 0, 0},
    { 'A',  4, 74, "PA4 (AD12)",             0, "26"            , 0, 0, 0, 0},
    { 'A',  5, 73, "PA5 (AD13)",             0, "27"            , 0, 0, 0, 0},
    { 'A',  6, 72, "PA6 (AD14)",             0, "28"            , 0, 0, 0, 0},
    { 'A',  7, 71, "PA7 (AD15)",             0, "29"            , 0, 0, 0, 0},

    { 'K',  0, 89, "PK0 (ADC8/PCINT16)",     0, "A8"            , 0, 0, 0, 0}, // ADC or I/O
    { 'K',  1, 88, "PK1 (ADC9/PCINT17)",     0, "A9"            , 0, 0, 0, 0},
    { 'K',  2, 87, "PK2 (ADC10/PCINT18)",    0, "A10"           , 0, 0, 0, 0},
    { 'K',  3, 86, "PK3 (ADC11/PCINT19)",    0, "A11"           , 0, 0, 0, 0},
    { 'K',  4, 85, "PK4 (ADC12/PCINT20)",    0, "A12"           , 0, 0, 0, 0},
    { 'K',  5, 84, "PK5 (ADC13/PCINT21)",    0, "A13"           , 0, 0, 0, 0},
    { 'K',  6, 83, "PK6 (ADC14/PCINT22)",    0, "A14"           , 0, 0, 0, 0},
    { 'K',  7, 82, "PK7 (ADC15/PCINT23)",    0, "A15"           , 0, 0, 0, 0},

    { 'F',  0, 97, "PF0 (ADC0)",             0, "A0"            , 0, 0, 0, 0}, // ADC or I/O
    { 'F',  1, 96, "PF1 (ADC1)",             0, "A1"            , 0, 0, 0, 0},
    { 'F',  2, 95, "PF2 (ADC2)",             0, "A2"            , 0, 0, 0, 0},
    { 'F',  3, 94, "PF3 (ADC3)",             0, "A3"            , 0, 0, 0, 0},
    { 'F',  4, 93, "PF4 (ADC4/TCK)",         0, "A4"            , 0, 0, 0, 0},
    { 'F',  5, 92, "PF5 (ADC5/TMS)",         0, "A5"            , 0, 0, 0, 0},
    { 'F',  6, 91, "PF6 (ADC6/TDO)",         0, "A6"            , 0, 0, 0, 0},
    { 'F',  7, 90, "PF7 (ADC7/TDI)",         0, "A7"            , 0, 0, 0, 0},

};

McuAdcPinInfo AvrAtmega2560_100TQFPAdcPinInfo[] = {
    { 97, 0x00 },
    { 96, 0x01 },
    { 95, 0x02 },
    { 94, 0x03 },
    { 93, 0x04 },
    { 92, 0x05 },
    { 91, 0x06 },
    { 90, 0x07 },
    { 89, 0x08 },
    { 88, 0x09 },
    { 87, 0x0A },
    { 86, 0x0B },
    { 85, 0x0C },
    { 84, 0x0D },
    { 83, 0x0E },
    { 82, 0x0F },
};

//-----------------------------------------------------------------------------
// ATmega128 or ATmega64

McuIoPinInfo AvrAtmega128_64TQFPIoPinInfo[] = {
    { 'E',  0,  2 , "", 0, "", 0, 0, 0, 0},
    { 'E',  1,  3 , "", 0, "", 0, 0, 0, 0},
    { 'E',  2,  4 , "", 0, "", 0, 0, 0, 0},
    { 'E',  3,  5 , "", 0, "", 0, 0, 0, 0},
    { 'E',  4,  6 , "", 0, "", 0, 0, 0, 0},
    { 'E',  5,  7 , "", 0, "", 0, 0, 0, 0},
    { 'E',  6,  8 , "", 0, "", 0, 0, 0, 0},
    { 'E',  7,  9 , "", 0, "", 0, 0, 0, 0},

    { 'B',  0, 10 , "", 0, "", 0, 0, 0, 0},
    { 'B',  1, 11 , "", 0, "", 0, 0, 0, 0},
    { 'B',  2, 12 , "", 0, "", 0, 0, 0, 0},
    { 'B',  3, 13 , "", 0, "", 0, 0, 0, 0},
    { 'B',  4, 14 , "", 0, "", 0, 0, 0, 0},
    { 'B',  5, 15 , "", 0, "", 0, 0, 0, 0},
    { 'B',  6, 16 , "", 0, "", 0, 0, 0, 0},
    { 'B',  7, 17 , "", 0, "", 0, 0, 0, 0},

    { 'G',  3, 18 , "", 0, "", 0, 0, 0, 0},
    { 'G',  4, 19 , "", 0, "", 0, 0, 0, 0},

    { 'D',  0, 25 , "", 0, "", 0, 0, 0, 0},
    { 'D',  1, 26 , "", 0, "", 0, 0, 0, 0},
    { 'D',  2, 27 , "", 0, "", 0, 0, 0, 0},
    { 'D',  3, 28 , "", 0, "", 0, 0, 0, 0},
    { 'D',  4, 29 , "", 0, "", 0, 0, 0, 0},
    { 'D',  5, 30 , "", 0, "", 0, 0, 0, 0},
    { 'D',  6, 31 , "", 0, "", 0, 0, 0, 0},
    { 'D',  7, 32 , "", 0, "", 0, 0, 0, 0},

    { 'G',  0, 33 , "", 0, "", 0, 0, 0, 0},
    { 'G',  1, 34 , "", 0, "", 0, 0, 0, 0},

    { 'C',  0, 35 , "", 0, "", 0, 0, 0, 0},
    { 'C',  1, 36 , "", 0, "", 0, 0, 0, 0},
    { 'C',  2, 37 , "", 0, "", 0, 0, 0, 0},
    { 'C',  3, 38 , "", 0, "", 0, 0, 0, 0},
    { 'C',  4, 39 , "", 0, "", 0, 0, 0, 0},
    { 'C',  5, 40 , "", 0, "", 0, 0, 0, 0},
    { 'C',  6, 41 , "", 0, "", 0, 0, 0, 0},
    { 'C',  7, 42 , "", 0, "", 0, 0, 0, 0},

    { 'G',  2, 43 , "", 0, "", 0, 0, 0, 0},

    { 'A',  7, 44 , "", 0, "", 0, 0, 0, 0},
    { 'A',  6, 45 , "", 0, "", 0, 0, 0, 0},
    { 'A',  5, 46 , "", 0, "", 0, 0, 0, 0},
    { 'A',  4, 47 , "", 0, "", 0, 0, 0, 0},
    { 'A',  3, 48 , "", 0, "", 0, 0, 0, 0},
    { 'A',  2, 49 , "", 0, "", 0, 0, 0, 0},
    { 'A',  1, 50 , "", 0, "", 0, 0, 0, 0},
    { 'A',  0, 51 , "", 0, "", 0, 0, 0, 0},

    { 'F',  7, 54 , "", 0, "", 0, 0, 0, 0},
    { 'F',  6, 55 , "", 0, "", 0, 0, 0, 0},
    { 'F',  5, 56 , "", 0, "", 0, 0, 0, 0},
    { 'F',  4, 57 , "", 0, "", 0, 0, 0, 0},
    { 'F',  3, 58 , "", 0, "", 0, 0, 0, 0},
    { 'F',  2, 59 , "", 0, "", 0, 0, 0, 0},
    { 'F',  1, 60 , "", 0, "", 0, 0, 0, 0},
    { 'F',  0, 61 , "", 0, "", 0, 0, 0, 0},
};

McuAdcPinInfo AvrAtmega128_64TQFPAdcPinInfo[] = {
    { 61, 0x00 },
    { 60, 0x01 },
    { 59, 0x02 },
    { 58, 0x03 },
    { 57, 0x04 },
    { 56, 0x05 },
    { 55, 0x06 },
    { 54, 0x07 },
};


//-----------------------------------------------------------------------------
// ATmega162

McuIoPinInfo AvrAtmega162IoPinInfo[] = {
    { 'B',  0,  1 , "", 0, "", 0, 0, 0, 0},
    { 'B',  1,  2 , "", 0, "", 0, 0, 0, 0},
    { 'B',  2,  3 , "", 0, "", 0, 0, 0, 0},
    { 'B',  3,  4 , "", 0, "", 0, 0, 0, 0},
    { 'B',  4,  5 , "", 0, "", 0, 0, 0, 0},
    { 'B',  5,  6 , "", 0, "", 0, 0, 0, 0},
    { 'B',  6,  7 , "", 0, "", 0, 0, 0, 0},
    { 'B',  7,  8 , "", 0, "", 0, 0, 0, 0},
    { 'D',  0, 10 , "", 0, "", 0, 0, 0, 0},
    { 'D',  1, 11 , "", 0, "", 0, 0, 0, 0},
    { 'D',  2, 12 , "", 0, "", 0, 0, 0, 0},
    { 'D',  3, 13 , "", 0, "", 0, 0, 0, 0},
    { 'D',  4, 14 , "", 0, "", 0, 0, 0, 0},
    { 'D',  5, 15 , "", 0, "", 0, 0, 0, 0},
    { 'D',  6, 16 , "", 0, "", 0, 0, 0, 0},
    { 'D',  7, 17 , "", 0, "", 0, 0, 0, 0},
    { 'C',  0, 21 , "", 0, "", 0, 0, 0, 0},
    { 'C',  1, 22 , "", 0, "", 0, 0, 0, 0},
    { 'C',  2, 23 , "", 0, "", 0, 0, 0, 0},
    { 'C',  3, 24 , "", 0, "", 0, 0, 0, 0},
    { 'C',  4, 25 , "", 0, "", 0, 0, 0, 0},
    { 'C',  5, 26 , "", 0, "", 0, 0, 0, 0},
    { 'C',  6, 27 , "", 0, "", 0, 0, 0, 0},
    { 'C',  7, 28 , "", 0, "", 0, 0, 0, 0},
    { 'E',  2, 29 , "", 0, "", 0, 0, 0, 0},
    { 'E',  1, 30 , "", 0, "", 0, 0, 0, 0},
    { 'E',  0, 31 , "", 0, "", 0, 0, 0, 0},
    { 'A',  7, 32 , "", 0, "", 0, 0, 0, 0},
    { 'A',  6, 33 , "", 0, "", 0, 0, 0, 0},
    { 'A',  5, 34 , "", 0, "", 0, 0, 0, 0},
    { 'A',  4, 35 , "", 0, "", 0, 0, 0, 0},
    { 'A',  3, 36 , "", 0, "", 0, 0, 0, 0},
    { 'A',  2, 37 , "", 0, "", 0, 0, 0, 0},
    { 'A',  1, 38 , "", 0, "", 0, 0, 0, 0},
    { 'A',  0, 39 , "", 0, "", 0, 0, 0, 0},
};


//-----------------------------------------------------------------------------
// ATmega16 or ATmega32

McuIoPinInfo AvrAtmega16or32IoPinInfo[] = {
    { 'B',  0,  1, "PB0 (T0/XCK)"   , 0, "", 0, 0, 0, 0},
    { 'B',  1,  2, "PB1 (T1)"       , 0, "", 0, 0, 0, 0},
    { 'B',  2,  3, "PB2 (INT2/AIN0)", 0, "", 0, 0, 0, 0},
    { 'B',  3,  4, "PB3 (OC0/AIN1)" , 0, "", 0, 0, 0, 0},
    { 'B',  4,  5, "PB4 (_SS)"      , 0, "", 0, 0, 0, 0},
    { 'B',  5,  6, "PB5 (MOSI)"     , 0, "", 0, 0, 0, 0},
    { 'B',  6,  7, "PB6 (MISO)"     , 0, "", 0, 0, 0, 0},
    { 'B',  7,  8, "PB7 (SCK)"      , 0, "", 0, 0, 0, 0},
    { 'D',  0, 14, "PD0 (RXD)"      , 0, "", 0, 0, 0, 0},
    { 'D',  1, 15, "PD1 (TXD)"      , 0, "", 0, 0, 0, 0},
    { 'D',  2, 16, "PD2 (INT0)"     , 0, "", 0, 0, 0, 0},
    { 'D',  3, 17, "PD3 (INT1)"     , 0, "", 0, 0, 0, 0},
    { 'D',  4, 18, "PD4 (OC1B)"     , 0, "", 0, 0, 0, 0},
    { 'D',  5, 19, "PD5 (OC1A)"     , 0, "", 0, 0, 0, 0},
    { 'D',  6, 20, "PD6 (ICP1)"     , 0, "", 0, 0, 0, 0},
    { 'D',  7, 21, "PD7 (OC2)"      , 0, "", 0, 0, 0, 0},
    { 'C',  0, 22, "PC0 (SCL)"      , 0, "", 0, 0, 0, 0},
    { 'C',  1, 23, "PC1 (SDA)"      , 0, "", 0, 0, 0, 0},
    { 'C',  2, 24, "PC2 (TCK)"      , 0, "", 0, 0, 0, 0},
    { 'C',  3, 25, "PC3 (TMS)"      , 0, "", 0, 0, 0, 0},
    { 'C',  4, 26, "PC4 (TDO)"      , 0, "", 0, 0, 0, 0},
    { 'C',  5, 27, "PC5 (TDI)"      , 0, "", 0, 0, 0, 0},
    { 'C',  6, 28, "PC6 (TOSC1)"    , 0, "", 0, 0, 0, 0},
    { 'C',  7, 29, "PC7 (TOSC2)"    , 0, "", 0, 0, 0, 0},
    { 'A',  0, 40, "PA0 (ADC0)"     , 0, "", 0, 0, 0, 0},
    { 'A',  1, 39, "PA1 (ADC1)"     , 0, "", 0, 0, 0, 0},
    { 'A',  2, 38, "PA2 (ADC2)"     , 0, "", 0, 0, 0, 0},
    { 'A',  3, 37, "PA3 (ADC3)"     , 0, "", 0, 0, 0, 0},
    { 'A',  4, 36, "PA4 (ADC4)"     , 0, "", 0, 0, 0, 0},
    { 'A',  5, 35, "PA5 (ADC5)"     , 0, "", 0, 0, 0, 0},
    { 'A',  6, 34, "PA6 (ADC6)"     , 0, "", 0, 0, 0, 0},
    { 'A',  7, 33, "PA7 (ADC7)"     , 0, "", 0, 0, 0, 0},
};

McuAdcPinInfo AvrAtmega16or32AdcPinInfo[] = {
    { 40, 0x00 },
    { 39, 0x01 },
    { 38, 0x02 },
    { 37, 0x03 },
    { 36, 0x04 },
    { 35, 0x05 },
    { 34, 0x06 },
    { 33, 0x07 },
};

//-----------------------------------------------------------------------------
// ATmega16 or ATmega32 in 44-Pin packages
McuIoPinInfo AvrAtmega16or32IoPinInfo44[] = {
    { 'B',  0, 40, "PB0 (T0/XCK)"   , 0, "", 0, 0, 0, 0},
    { 'B',  1, 41, "PB1 (T1)"       , 0, "", 0, 0, 0, 0},
    { 'B',  2, 42, "PB2 (INT2/AIN0)", 0, "", 0, 0, 0, 0},
    { 'B',  3, 43, "PB3 (OC0/AIN1)" , 0, "", 0, 0, 0, 0},
    { 'B',  4, 44, "PB4 (_SS)"      , 0, "", 0, 0, 0, 0},
    { 'B',  5,  1, "PB5 (MOSI)"     , 0, "", 0, 0, 0, 0},
    { 'B',  6,  2, "PB6 (MISO)"     , 0, "", 0, 0, 0, 0},
    { 'B',  7,  3, "PB7 (SCK)"      , 0, "", 0, 0, 0, 0},
    { 'D',  0,  9, "PD0 (RXD)"      , 0, "", 0, 0, 0, 0},
    { 'D',  1, 10, "PD1 (TXD)"      , 0, "", 0, 0, 0, 0},
    { 'D',  2, 11, "PD2 (INT0)"     , 0, "", 0, 0, 0, 0},
    { 'D',  3, 12, "PD3 (INT1)"     , 0, "", 0, 0, 0, 0},
    { 'D',  4, 13, "PD4 (OC1B)"     , 0, "", 0, 0, 0, 0},
    { 'D',  5, 14, "PD5 (OC1A)"     , 0, "", 0, 0, 0, 0},
    { 'D',  6, 15, "PD6 (ICP1)"     , 0, "", 0, 0, 0, 0},
    { 'D',  7, 16, "PD7 (OC2)"      , 0, "", 0, 0, 0, 0},
    { 'C',  0, 19, "PC0 (SCL)"      , 0, "", 0, 0, 0, 0},
    { 'C',  1, 20, "PC1 (SDA)"      , 0, "", 0, 0, 0, 0},
    { 'C',  2, 21, "PC2 (TCK)"      , 0, "", 0, 0, 0, 0},
    { 'C',  3, 22, "PC3 (TMS)"      , 0, "", 0, 0, 0, 0},
    { 'C',  4, 23, "PC4 (TDO)"      , 0, "", 0, 0, 0, 0},
    { 'C',  5, 24, "PC5 (TDI)"      , 0, "", 0, 0, 0, 0},
    { 'C',  6, 25, "PC6 (TOSC1)"    , 0, "", 0, 0, 0, 0},
    { 'C',  7, 26, "PC7 (TOSC2)"    , 0, "", 0, 0, 0, 0},
    { 'A',  0, 37, "PA0 (ADC0)"     , 0, "", 0, 0, 0, 0},
    { 'A',  1, 36, "PA1 (ADC1)"     , 0, "", 0, 0, 0, 0},
    { 'A',  2, 35, "PA2 (ADC2)"     , 0, "", 0, 0, 0, 0},
    { 'A',  3, 34, "PA3 (ADC3)"     , 0, "", 0, 0, 0, 0},
    { 'A',  4, 33, "PA4 (ADC4)"     , 0, "", 0, 0, 0, 0},
    { 'A',  5, 32, "PA5 (ADC5)"     , 0, "", 0, 0, 0, 0},
    { 'A',  6, 31, "PA6 (ADC6)"     , 0, "", 0, 0, 0, 0},
    { 'A',  7, 30, "PA7 (ADC7)"     , 0, "", 0, 0, 0, 0},
};

McuAdcPinInfo AvrAtmega16or32AdcPinInfo44[] = {
    { 37, 0x00 },
    { 36, 0x01 },
    { 35, 0x02 },
    { 34, 0x03 },
    { 33, 0x04 },
    { 32, 0x05 },
    { 31, 0x06 },
    { 30, 0x07 },
};

//-----------------------------------------------------------------------------
// ATmega16U4 or ATmega32U4 in 44-Pin packages

//-----------------------------------------------------------------------------
// ATmega8 PDIP-28

McuIoPinInfo AvrAtmega8IoPinInfo28[] = {
//   port bit pin  pinName        ArduinoPin  ArduinoName
//                                         X
    { 'D',  0,  2, "PD0 (RXD)"          ,  2, "0"   , 0, 0, 0, 0},
    { 'D',  1,  3, "PD1 (TXD)"          ,  3, "1"   , 0, 0, 0, 0},
    { 'D',  2,  4, "PD2 (INT0)"         ,  4, "2"   , 0, 0, 0, 0},
    { 'D',  3,  5, "PD3 (INT1)"         ,  5, "3"   , 0, 0, 0, 0},
    { 'D',  4,  6, "PD4 (XCK / T0)"     ,  6, "4"   , 0, 0, 0, 0},
    { 'D',  5, 11, "PD5 (T1)"           , 11, "5"   , 0, 0, 0, 0},
    { 'D',  6, 12, "PD6 (AIN0)"         , 12, "6"   , 0, 0, 0, 0},
    { 'D',  7, 13, "PD7 (AIN1)"         , 13, "7"   , 0, 0, 0, 0},
    { 'B',  0, 14, "PB0 (ICP1)"         , 14, "8"   , 0, 0, 0, 0},
    { 'B',  1, 15, "PB1 (OC1A)"         , 15, "9"   , 0, 0, 0, 0},
    { 'B',  2, 16, "PB2 (SS / OC1B)"    , 16, "10"  , 0, 0, 0, 0},
    { 'B',  3, 17, "PB3 (MOSI / OC2)"   , 17, "11"  , 0, 0, 0, 0},
    { 'B',  4, 18, "PB4 (MISO)"         , 18, "12"  , 0, 0, 0, 0},
    { 'B',  5, 19, "PB5 (SCK)"          , 19, "13"  , 0, 0, 0, 0},
    { 'B',  6,  9, "PB6 (XTAL1 / TOSC1)",  9, ""    , 0, 0, 0, 0},
    { 'B',  7, 10, "PB7 (XTAL2 / TOSC2)", 10, ""    , 0, 0, 0, 0},
    { 'C',  0, 23, "PC0 (ADC0)"         , 23, "A0"  , 0, 0, 0, 0},
    { 'C',  1, 24, "PC1 (ADC1)"         , 24, "A1"  , 0, 0, 0, 0},
    { 'C',  2, 25, "PC2 (ADC2)"         , 25, "A2"  , 0, 0, 0, 0},
    { 'C',  3, 26, "PC3 (ADC3)"         , 26, "A3"  , 0, 0, 0, 0},
    { 'C',  4, 27, "PC4 (ADC4 / SDA)"   , 27, "A4"  , 0, 0, 0, 0},
    { 'C',  5, 28, "PC5 (ADC5 / SCL)"   , 28, "A5"  , 0, 0, 0, 0},
//  { 'C',  6,  1, "PC6 (_RESET)"       ,  1, ""    , 0, 0, 0, 0},
};

//-----------------------------------------------------------------------------
McuIoPinInfo AvrAtmega8IoPinInfo[] = {
    { 'D',  0,  2, "PD0 (RXD)"          , 0, "", 0, 0, 0, 0},
    { 'D',  1,  3, "PD1 (TXD)"          , 0, "", 0, 0, 0, 0},
    { 'D',  2,  4, "PD2 (INT0)"         , 0, "", 0, 0, 0, 0},
    { 'D',  3,  5, "PD3 (INT1)"         , 0, "", 0, 0, 0, 0},
    { 'D',  4,  6, "PD4 (XCK / T0)"     , 0, "", 0, 0, 0, 0},
    { 'D',  5, 11, "PD5 (T1)"           , 0, "", 0, 0, 0, 0},
    { 'D',  6, 12, "PD6 (AIN0)"         , 0, "", 0, 0, 0, 0},
    { 'D',  7, 13, "PD7 (AIN1)"         , 0, "", 0, 0, 0, 0},
    { 'B',  0, 14, "PB0 (ICP1)"         , 0, "", 0, 0, 0, 0},
    { 'B',  1, 15, "PB1 (OC1A)"         , 0, "", 0, 0, 0, 0},
    { 'B',  2, 16, "PB2 (SS / OC1B)"    , 0, "", 0, 0, 0, 0},
    { 'B',  3, 17, "PB3 (MOSI / OC2)"   , 0, "", 0, 0, 0, 0},
    { 'B',  4, 18, "PB4 (MISO)"         , 0, "", 0, 0, 0, 0},
    { 'B',  5, 19, "PB5 (SCK)"          , 0, "", 0, 0, 0, 0},
    { 'B',  6,  9, "PB6 (XTAL1 / TOSC1)", 0, "", 0, 0, 0, 0},
    { 'B',  7, 10, "PB7 (XTAL2 / TOSC2)", 0, "", 0, 0, 0, 0},
    { 'C',  0, 23, "PC0 (ADC0)"         , 0, "", 0, 0, 0, 0},
    { 'C',  1, 24, "PC1 (ADC1)"         , 0, "", 0, 0, 0, 0},
    { 'C',  2, 25, "PC2 (ADC2)"         , 0, "", 0, 0, 0, 0},
    { 'C',  3, 26, "PC3 (ADC3)"         , 0, "", 0, 0, 0, 0},
    { 'C',  4, 27, "PC4 (ADC4 / SDA)"   , 0, "", 0, 0, 0, 0},
    { 'C',  5, 28, "PC5 (ADC5 / SCL)"   , 0, "", 0, 0, 0, 0},
//  { 'C',  6,  1, "PC6 (_RESET)"       , 0, "", 0, 0, 0, 0},
};

//-----------------------------------------------------------------------------
// ATmega328 32-Pin packages TQFP/QFN/MLF

//-----------------------------------------------------------------------------
// ATmega328 PDIP-28

McuIoPinInfo AvrAtmega328IoPinInfo[] = {
//   port bit pin  pinName                 ArduinoPin  ArduinoName
//                                                  X
    { 'D',  0,  2, "PD0 (PCINT16 / RXD)"         ,  2, "0; //RX<-"  , 0, 0, 0, 0},
    { 'D',  1,  3, "PD1 (PCINT17 / TXD)"         ,  3, "1; //TX->"  , 0, 0, 0, 0},
    { 'D',  2,  4, "PD2 (PCINT18 / INT0)"        ,  4, "2"          , 0, 0, 0, 0},
    { 'D',  3,  5, "PD3 (PCINT19 / OC2B / INT1)" ,  5, "3; //PWM~"  , 0, 0, 0, 0},
    { 'D',  4,  6, "PD4 (PCINT20 / XCK / T0)"    ,  6, "4"          , 0, 0, 0, 0},
    { 'D',  5, 11, "PD5 (PCINT21 / OC0B / T1)"   , 11, "5; //PWM~"  , 0, 0, 0, 0},
    { 'D',  6, 12, "PD6 (PCINT22 / OC0A / AIN0)" , 12, "6; //PWM~"  , 0, 0, 0, 0},
    { 'D',  7, 13, "PD7 (PCINT23 / AIN1)"        , 13, "7"          , 0, 0, 0, 0},
    { 'B',  0, 14, "PB0 (PCINT0 / CLKO / ICP1)"  , 14, "8"          , 0, 0, 0, 0},
    { 'B',  1, 15, "PB1 (OC1A / PCINT1)"         , 15, "9; //PWM~"  , 0, 0, 0, 0},
    { 'B',  2, 16, "PB2 (SS / OC1B / PCINT2)"    , 16, "10; //PWM~" , 0, 0, 0, 0},
    { 'B',  3, 17, "PB3 (MOSI / OC2A / PCINT3)"  , 17, "11; //PWM~" , 0, 0, 0, 0},
    { 'B',  4, 18, "PB4 (MISO / PCINT4)"         , 18, "12"         , 0, 0, 0, 0},
    { 'B',  5, 19, "PB5 (SCK / PCINT5)"          , 19, "13"         , 0, 0, 0, 0},
//              7                                      VCC          , 0, 0, 0, 0
//              8                                      GND          , 0, 0, 0, 0
    { 'B',  6,  9, "PB6 (PCINT6 / XTAL1 / TOSC1)",  9, "crystal"    , 0, 0, 0, 0},
    { 'B',  7, 10, "PB7 (PCINT7 / XTAL2 / TOSC2)", 10, "crystal"    , 0, 0, 0, 0},
//             20                                     AVCC          , 0, 0, 0, 0
//             21                                     AREF          , 0, 0, 0, 0
//             22                                      GND          , 0, 0, 0, 0
    { 'C',  0, 23, "PC0 (ADC0 / PCINT8)"         , 23, "A0"         , 0, 0, 0, 0},
    { 'C',  1, 24, "PC1 (ADC1 / PCINT9)"         , 24, "A1"         , 0, 0, 0, 0},
    { 'C',  2, 25, "PC2 (ADC2 / PCINT10)"        , 25, "A2"         , 0, 0, 0, 0},
    { 'C',  3, 26, "PC3 (ADC3 / PCINT11)"        , 26, "A3"         , 0, 0, 0, 0},
    { 'C',  4, 27, "PC4 (ADC4 / SDA / PCINT12)"  , 27, "A4"         , 0, 0, 0, 0},
    { 'C',  5, 28, "PC5 (ADC5 / SCL / PCINT13)"  , 28, "A5"         , 0, 0, 0, 0},
//  { 'C',  6,  1, "PC6 (PCINT14 / _RESET)"      ,  1, "reset"      , 0, 0, 0, 0}
};

McuAdcPinInfo AvrAtmega8AdcPinInfo[] = {
    { 23, 0x00 }, // ADC0
    { 24, 0x01 },
    { 25, 0x02 },
    { 26, 0x03 },
    { 27, 0x04 },
    { 28, 0x05 }, // ADC5
};


//-----------------------------------------------------------------------------
// ATtiny10 6-Pin packages

//-----------------------------------------------------------------------------
// ATtiny85 8-Pin packages
//-----------------------------------------------------------------------------
// ATmega8 32-Pin packages TQFP/QFN/MLF

McuIoPinInfo AvrAtmega8IoPinInfo32[] = {
    { 'D',  0, 30, "PD0 (RXD)"          , 0, "", 0, 0, 0, 0}, // {char port;  int bit;  int pin;}
    { 'D',  1, 31, "PD1 (TXD)"          , 0, "", 0, 0, 0, 0},
    { 'D',  2, 32, "PD2 (INT0)"         , 0, "", 0, 0, 0, 0},
    { 'D',  3,  1, "PD3 (INT1)"         , 0, "", 0, 0, 0, 0},
    { 'D',  4,  2, "PD4 (XCK / T0)"     , 0, "", 0, 0, 0, 0},
    { 'D',  5,  9, "PD5 (T1)"           , 0, "", 0, 0, 0, 0},
    { 'D',  6, 10, "PD6 (AIN0)"         , 0, "", 0, 0, 0, 0},
    { 'D',  7, 11, "PD7 (AIN1)"         , 0, "", 0, 0, 0, 0},
    { 'B',  0, 12, "PB0 (ICP1)"         , 0, "", 0, 0, 0, 0},
    { 'B',  1, 13, "PB1 (OC1A)"         , 0, "", 0, 0, 0, 0},
    { 'B',  2, 14, "PB2 (OC1B / SS)"    , 0, "", 0, 0, 0, 0},
    { 'B',  3, 15, "PB3 (MOSI / OC2)"   , 0, "", 0, 0, 0, 0},
    { 'B',  4, 16, "PB4 (MISO)"         , 0, "", 0, 0, 0, 0},
    { 'B',  5, 17, "PB5 (SCK)"          , 0, "", 0, 0, 0, 0},
    { 'B',  6,  7, "PB6 (XTAL1 / TOSC1)", 0, "", 0, 0, 0, 0},
    { 'B',  7,  8, "PB7 (XTAL2 / TOSC2)", 0, "", 0, 0, 0, 0},
    { 'C',  0, 23, "PC0 (ADC0)"         , 0, "", 0, 0, 0, 0},
    { 'C',  1, 24, "PC1 (ADC1)"         , 0, "", 0, 0, 0, 0},
    { 'C',  2, 25, "PC2 (ADC2)"         , 0, "", 0, 0, 0, 0},
    { 'C',  3, 26, "PC3 (ADC3)"         , 0, "", 0, 0, 0, 0},
    { 'C',  4, 27, "PC4 (ADC4 / SDA)"   , 0, "", 0, 0, 0, 0},
    { 'C',  5, 28, "PC5 (ADC5 / SCL)"   , 0, "", 0, 0, 0, 0},
    { 'C',  6, 29, "PC6 (RESET)"        , 0, "", 0, 0, 0, 0},
};

McuAdcPinInfo AvrAtmega8AdcPinInfo32[] = {
    { 23, 0x00 }, // ADC0 {int pin;   BYTE muxRegValue;}
    { 24, 0x01 },
    { 25, 0x02 },
    { 26, 0x03 },
    { 27, 0x04 },
    { 28, 0x05 }, // ADC5
    { 19, 0x06 },
    { 22, 0x07 }, // ADC7
};

McuExtIntPinInfo AvrExtIntPinInfo32[] = {
    { 32 }, // PD2/INT0
    {  1 }, // PD3/INT1
};

//-----------------------------------------------------------------------------
// PIC's
McuExtIntPinInfo PicExtIntPinInfo6[] = {
    {    }, //
};

McuExtIntPinInfo PicExtIntPinInfo14[] = {
    { 11 }, // INT
};

McuExtIntPinInfo PicExtIntPinInfo18[] = {
    {  6 }, // RB0/INT
};

McuExtIntPinInfo PicExtIntPinInfo28[] = {
    { 21 }, // RB0/INT
};

McuExtIntPinInfo PicExtIntPinInfo40[] = {
    { 33 }, // RB0/INT
};

McuExtIntPinInfo PicExtIntPinInfo44[] = {
    { 8 }, // RB0/INT
};

McuExtIntPinInfo PicExtIntPinInfo64[] = {
    { 48 }, // RB0/INT
};

//-----------------------------------------------------------------------------
// AVR's I2C Info Tables

///// Added by JG
McuI2cInfo McuI2cInfoATmega8[] = {
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      28,     27 },       // I2C = PC5 + PC4
//  NB: All pins for a same I2C peripheral must be on the same port PX because of PinsForI2cVariable()
};

McuI2cInfo McuI2cInfoATmega16[] = {                                             // For AtMega16, 32, 164, 324, 644, 1284
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      22,     23 },       // I2C = PB8 + PB9
//  NB: All pins for a same I2C peripheral must be on the same port PX because of PinsForI2cVariable()
};

McuI2cInfo McuI2cInfoATmega64[] = {                                             // For AtMega16, 32, 164, 324, 644, 1284
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      25,     26 },       // I2C = PD0 + PD1
//  NB: All pins for a same I2C peripheral must be on the same port PX because of PinsForI2cVariable()
};

McuI2cInfo McuI2cInfoATmega328[] = {                                            // For AtMega48, 88, 168, 328
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      28,     27 },       // I2C = PB8 + PB9
//  NB: All pins for a same I2C peripheral must be on the same port PX because of PinsForI2cVariable()
};

McuI2cInfo McuI2cInfoATmega2560[] = {                                           // For AtMega640, 1280, 2560
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      43,     44 },       // I2C = PD0 + PD1
//  NB: All pins for a same I2C peripheral must be on the same port PX because of PinsForI2cVariable()
};
/////

//-----------------------------------------------------------------------------
// AVR's SPI Info Tables

///// Added by JG
McuSpiInfo McuSpiInfoATmega8[] = {
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB6   PB5  PB7  PB4
    { "SPI",       0x0D,    0x0E,    0x0F,  18,   17,  19,  16 },
};

McuSpiInfo McuSpiInfoATmega16[] = {
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB6   PB5  PB7  PB4
    { "SPI",       0x0D,    0x0E,    0x0F,  7,    6,   8,   5 },        // For AtMega16, 32, 162, 164, 324, 644, 1284
};

McuSpiInfo McuSpiInfoATmega64[] = {
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB6   PB5  PB7  PB4
    { "SPI",       0x0D,    0x0E,    0x4E,  13,   12,  11,  10 },       // For AtMega64, 128
};


McuSpiInfo McuSpiInfoATmega328[] = {                                    // For AtMega48, 88, 168, 328
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB6   PB5  PB7  PB4
    { "SPI",       0x4C,    0x4D,    0x4E,  18,   17,  19,  16 },
};
/////

McuSpiInfo McuSpiInfoATmega2560[] = {
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB3   PB2  PB1  PB0
    { "SPI",       0x4C,    0x4D,    0x4E,  22,   21,  20,  19 },
};

//-----------------------------------------------------------------------------
// AVR's PWM Info Tables

McuPwmPinInfo AvrPwmPinInfo28_[] = { // ATmega8, etc.
////     ti  reso max REG_   REG_   REG_   bit    bit    mask  REG_   mask
//// pin mer lutn  CS OCRnxL OCRnxH TCCRnA COMnx1 COMnx0 WGMa  TCCRnB WGMb
    {  0, 0, 8,    5, 0   ,  0x52,  0x53,  0,     0,        0, 0   ,  0    , ""}, // Timer0

    { 15, 1, 8,    5, 0x4A,  0x4B,  0x4F,  7,     6,        1, 0x4E,  0x08 , ""}, // OC1A // Fast PWM  8-bit
    { 15, 1, 9,    5, 0x4A,  0x4B,  0x4F,  7,     6,        2, 0x4E,  0x08 , ""}, // OC1A // Fast PWM  9-bit
    { 15, 1,10,    5, 0x4A,  0x4B,  0x4F,  7,     6,        3, 0x4E,  0x08 , ""}, // OC1A // Fast PWM 10-bit

    { 16, 1, 8,    5, 0x48,  0x49,  0x4F,  5,     4,        1, 0x4E,  0x08 , ""}, // OC1B // Fast PWM  8-bit
    { 16, 1, 9,    5, 0x48,  0x49,  0x4F,  5,     4,        2, 0x4E,  0x08 , ""}, // OC1B // Fast PWM  9-bit
    { 16, 1,10,    5, 0x48,  0x49,  0x4F,  5,     4,        3, 0x4E,  0x08 , ""}, // OC1B // Fast PWM 10-bit

    { 17, 2, 8,    7, 0x43,  0   ,  0x45,  5,     4,     0x48, 0   ,  0    , ""}, // OC2  // Fast PWM
};

McuPwmPinInfo AvrPwmPinInfo28[] = { // ATmega328, etc.
////     ti  reso max REG_   REG_   REG_   bit    bit    mask  REG_   mask
//// pin mer lutn  CS OCRnxL OCRnxH TCCRnA COMnx1 COMnx0 WGMa  TCCRnB WGMb
    { 12, 0, 8,    5, 0x47,  0   ,  0x44,  7,     6,        3, 0x45,  0    ,"OC0A" }, // Fast PWM  8-bit
    { 11, 0, 8,    5, 0x48,  0   ,  0x44,  5,     4,        3, 0x45,  0    ,"OC0B" }, // Fast PWM  8-bit

    { 15, 1, 8,    5, 0x88,  0x89,  0x80,  7,     6,        1, 0x81,  0x08 ,"OC1A" }, // Fast PWM  8-bit
    { 15, 1, 9,    5, 0x88,  0x89,  0x80,  7,     6,        2, 0x81,  0x08 ,"OC1A" }, // Fast PWM  9-bit
    { 15, 1,10,    5, 0x88,  0x89,  0x80,  7,     6,        3, 0x81,  0x08 ,"OC1A" }, // Fast PWM 10-bit

    { 16, 1, 8,    5, 0x8A,  0x8B,  0x80,  5,     4,        1, 0x81,  0x08 ,"OC1B" }, // Fast PWM  8-bit
    { 16, 1, 9,    5, 0x8A,  0x8B,  0x80,  5,     4,        2, 0x81,  0x08 ,"OC1B" }, // Fast PWM  9-bit
    { 16, 1,10,    5, 0x8A,  0x8B,  0x80,  5,     4,        3, 0x81,  0x08 ,"OC1B" }, // Fast PWM 10-bit

    { 17, 2, 8,    7, 0xB3,  0   ,  0xB0,  7,     6,        3, 0xB1,  0    ,"OC2A" }, // Fast PWM  8-bit
    {  5, 2, 8,    7, 0xB4,  0   ,  0xB0,  5,     4,        3, 0xB1,  0    ,"OC2B" }, // Fast PWM  8-bit
};

McuPwmPinInfo AvrPwmPinInfo32_[] = {
////     ti  reso max REG_   REG_   REG_   bit    bit    mask  REG_   mask
//// pin mer lutn  CS OCRnxL OCRnxH TCCRnA COMnx1 COMnx0 WGMa  TCCRnB WGMb
//  { 13, 1, 8,    5, 0x4A,  0x4B,  0x4F,  7,     6,        1, 0x4E,  0x00 , ""}, // OC1A // Phase Correct PWM
//  { 14, 1, 8,    5, 0x48,  0x49,  0x4F,  5,     4,        1, 0x4E,  0x00 , ""}, // OC1B // Phase Correct PWM
//  { 15, 2, 8,    7, 0x43,  0   ,  0x45,  5,     4,     0x40, 0   ,  0    , ""}, // OC2  // Phase Correct PWM
    {  0, 0, 8,    5, 0   ,  0x52,  0x53,  0,     0,        0, 0   ,  0    , ""}, // Timer0
    { 13, 1, 8,    5, 0x4A,  0x4B,  0x4F,  7,     6,        1, 0x4E,  0x08 , ""}, // OC1A // Fast PWM 8-bit
    { 14, 1, 8,    5, 0x48,  0x49,  0x4F,  5,     4,        1, 0x4E,  0x08 , ""}, // OC1B // Fast PWM 8-bit
    { 15, 2, 8,    7, 0x43,  0   ,  0x45,  5,     4,     0x48, 0   ,  0    , ""}, // OC2  // Fast PWM
};

McuPwmPinInfo AvrAtmega2560PwmPinInfo[] = {
////     ti  reso max REG_    REG_   REG_   bit    bit    mask  REG_   mask
//// pin mer lutn  CS OCRnxL  OCRnxH TCCRnA COMnx1 COMnx0 WGMa  TCCRnB WGMb
//  { 26, 0, 8,     5, 0x47,  0,     0x44,  7,     6,        1, 0x45,  0x08 , ""}, // OC0A
    {  1, 0, 8,     5, 0x48,  0,     0x44,  5,     4,        2, 0x45,  0x08 , ""}, // OC0B

    { 24, 1, 8,     5, 0x88,  0x89,  0x80,  7,     6,        1, 0x81,  0x08 , ""}, // OC1A
    { 24, 1, 9,     5, 0x88,  0x89,  0x80,  7,     6,        2, 0x81,  0x08 , ""}, // OC1A
    { 24, 1,10,     5, 0x88,  0x89,  0x80,  7,     6,        3, 0x81,  0x08 , ""}, // OC1A

    { 25, 1, 8,     5, 0x8A,  0x8B,  0x80,  5,     4,        1, 0x81,  0x08 , ""}, // OC1B
    { 25, 1, 9,     5, 0x8A,  0x8B,  0x80,  5,     4,        2, 0x81,  0x08 , ""}, // OC1B
    { 25, 1,10,     5, 0x8A,  0x8B,  0x80,  5,     4,        3, 0x81,  0x08 , ""}, // OC1B

    { 26, 1, 8,     5, 0x8C,  0x8D,  0x80,  3,     2,        1, 0x81,  0x08 , ""}, // OC1C
    { 26, 1, 9,     5, 0x8C,  0x8D,  0x80,  3,     2,        2, 0x81,  0x08 , ""}, // OC1C
    { 26, 1,10,     5, 0x8C,  0x8D,  0x80,  3,     2,        3, 0x81,  0x08 , ""}, // OC1C

    { 23, 2, 8,     5, 0xB3,  0,     0xB0,  7,     6,        1, 0xB1,  0x08 , ""}, // OC2A
    { 18, 2, 8,     5, 0xB4,  0,     0xB0,  5,     4,        2, 0xB1,  0x08 , ""}, // OC2B

    {  5, 3, 8,     5, 0x98,  0x99,  0x90,  7,     6,        1, 0x91,  0x08 , ""}, // OC3A
    {  5, 3, 9,     5, 0x98,  0x99,  0x90,  7,     6,        2, 0x91,  0x08 , ""}, // OC3A
    {  5, 3,10,     5, 0x98,  0x99,  0x90,  7,     6,        3, 0x91,  0x08 , ""}, // OC3A

    {  6, 3, 8,     5, 0x9A,  0x9B,  0x90,  5,     4,        1, 0x91,  0x08 , ""}, // OC3B
    {  6, 3, 9,     5, 0x9A,  0x9B,  0x90,  5,     4,        2, 0x91,  0x08 , ""}, // OC3B
    {  6, 3,10,     5, 0x9A,  0x9B,  0x90,  5,     4,        3, 0x91,  0x08 , ""}, // OC3B

    {  7, 3, 8,     5, 0x9C,  0x9D,  0x90,  3,     2,        1, 0x91,  0x08 , ""}, // OC3C
    {  7, 3, 9,     5, 0x9C,  0x9D,  0x90,  3,     2,        2, 0x91,  0x08 , ""}, // OC3C
    {  7, 3,10,     5, 0x9C,  0x9D,  0x90,  3,     2,        3, 0x91,  0x08 , ""}, // OC3C

    { 15, 4, 8,     5, 0xA8,  0xA9,  0xA0,  7,     6,        1, 0xA1,  0x08 , ""}, // OC4A
    { 15, 4, 9,     5, 0xA8,  0xA9,  0xA0,  7,     6,        2, 0xA1,  0x08 , ""}, // OC4A
    { 15, 4,10,     5, 0xA8,  0xA9,  0xA0,  7,     6,        3, 0xA1,  0x08 , ""}, // OC4A

    { 16, 4, 8,     5, 0xAA,  0xAB,  0xA0,  5,     4,        1, 0xA1,  0x08 , ""}, // OC4B
    { 16, 4, 9,     5, 0xAA,  0xAB,  0xA0,  5,     4,        2, 0xA1,  0x08 , ""}, // OC4B
    { 16, 4,10,     5, 0xAA,  0xAB,  0xA0,  5,     4,        3, 0xA1,  0x08 , ""}, // OC4B

    { 17, 4, 8,     5, 0xAC,  0xAD,  0xA0,  3,     2,        1, 0xA1,  0x08 , ""}, // OC4C
    { 17, 4, 9,     5, 0xAC,  0xAD,  0xA0,  3,     2,        2, 0xA1,  0x08 , ""}, // OC4C
    { 17, 4,10,     5, 0xAC,  0xAD,  0xA0,  3,     2,        3, 0xA1,  0x08 , ""}, // OC4C

//  { 38, 5, 8,     5, 0x128, 0x129, 0x120, 7,     6,        1, 0x121, 0x08 , ""}, // OC5A ???
//  { 39, 5, 8,     5, 0x12A, 0x12B, 0x120, 5,     4,        1, 0x121, 0x08 , ""}, // OC5B
//  { 40, 5, 8,     5, 0x12C, 0x12D, 0x120, 3,     2,        1, 0x121, 0x08 , ""}, // OC5C
};

McuPwmPinInfo AvrAtmega16_32PwmPinInfo40[] = {
////     ti  reso max REG_    REG_   REG_   bit    bit    mask  REG_   mask
//// pin mer lutn  CS OCRnxL  OCRnxH TCCRnA COMnx1 COMnx0 WGMa  TCCRnB WGMb
    {  4, 0, 8,     5, 0x5C,  0,     0x53,  5,     4,     0x48, 0   ,  0    , ""}, // OC0

    { 19, 1, 8,     5, 0x4A,  0x4B,  0x4F,  7,     6,        1, 0x4E,  0x08 , ""}, // OC1A // Fast PWM  8-bit
    { 19, 1, 9,     5, 0x4A,  0x4B,  0x4F,  7,     6,        2, 0x4E,  0x08 , ""}, // OC1A // Fast PWM  9-bit
    { 19, 1,10,     5, 0x4A,  0x4B,  0x4F,  7,     6,        3, 0x4E,  0x08 , ""}, // OC1A // Fast PWM 10-bit

    { 18, 1, 8,     5, 0x48,  0x49,  0x4F,  5,     4,        1, 0x4E,  0x08 , ""}, // OC1B // Fast PWM  8-bit
    { 18, 1, 9,     5, 0x48,  0x49,  0x4F,  5,     4,        2, 0x4E,  0x08 , ""}, // OC1B // Fast PWM  9-bit
    { 18, 1,10,     5, 0x48,  0x49,  0x4F,  5,     4,        3, 0x4E,  0x08 , ""}, // OC1B // Fast PWM 10-bit

    { 21, 2, 8,     7, 0x43,  0   ,  0x45,  5,     4,     0x48, 0   ,  0    , ""}, // OC2  // Fast PWM
};

McuPwmPinInfo AvrPwmPinInfo40_[] = {
    { 21, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
};

McuPwmPinInfo AvrAtmega162PwmPinInfo40_[] = {
    {  2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
};

McuPwmPinInfo AvrPwmPinInfo44_[] = {
    { 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
};

McuPwmPinInfo AvrPwmPinInfo64_[] = {
    { 17, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
};

McuPwmPinInfo AvrPwmPinInfo100_[] = {
    { 23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
};

McuPwmPinInfo AvrPwmPinInfo32[] = {
////     ti  reso max REG_   REG_   REG_   bit    bit    mask  REG_   mask
//// pin mer lutn  CS OCRnxL OCRnxH TCCRnA COMnx1 COMnx0 WGMa  TCCRnB WGMb
    { 10, 0, 8,    5, 0x47,  0,     0x44,  7,     6,     3,    0x45,  0    , ""}, // OC0A // Fast PWM
    {  9, 0, 8,    5, 0x48,  0,     0x44,  5,     4,     3,    0x45,  0    , ""}, // OC0B

    { 13, 1, 8,    5, 0x88,  0x89,  0x80,  7,     6,     1,    0x81,  0x08 , ""}, // OC1A
    { 13, 1, 9,    5, 0x88,  0x89,  0x80,  7,     6,     2,    0x81,  0x08 , ""}, // OC1A
    { 13, 1,10,    5, 0x88,  0x89,  0x80,  7,     6,     3,    0x81,  0x08 , ""}, // OC1A

    { 14, 1, 8,    5, 0x8A,  0x8B,  0x80,  5,     4,     1,    0x81,  0x08 , ""}, // OC1B
    { 14, 1, 9,    5, 0x8A,  0x8B,  0x80,  5,     4,     2,    0x81,  0x08 , ""}, // OC1B
    { 14, 1,10,    5, 0x8A,  0x8B,  0x80,  5,     4,     3,    0x81,  0x08 , ""}, // OC1B

    { 15, 2, 8,    7, 0xB3,  0,     0xB0,  7,     6,     3,    0xB1,  0    , ""}, // OC2A
    {  1, 2, 8,    7, 0xB4,  0,     0xB0,  5,     4,     3,    0xB1,  0    , ""}, // OC2B
};

//-----------------------------------------------------------------------------
// PIC's PWM Info Tables
////     ti
//// pin mer
McuPwmPinInfo PicPwmPinInfo8[] = {
    {  5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
};

McuPwmPinInfo PicPwmPinInfo18[] = {
    {  9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
};

McuPwmPinInfo PicPwmPinInfo28_1[] = {
    { 13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
};

McuPwmPinInfo PicPwmPinInfo28_2[] = {
    { 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
    { 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
};

McuPwmPinInfo PicPwmPinInfo40[] = {
    { 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
    { 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
};

McuPwmPinInfo PicPwmPinInfo44[] = {
    { 35, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
    { 36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
};

McuPwmPinInfo PicPwmPinInfo64[] = {
    { 29, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ""  },
};

//-----------------------------------------------------------------------------
// PIC's I2C Info Tables

///// Added by JG
McuI2cInfo McuI2cInfoPic16F88[] = {                                             // For PIC16F88, 819
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      10,     7 },        // I2C = RB4 + RB1
//  NB: All pins for a same I2C peripheral must be on the same port RBX because of PinsForI2cVariable()
};

McuI2cInfo McuI2cInfoPic16F876[] = {                                            // For PIC16F876, 886
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      14,     15 },       // I2C = RC3 + RC4
//  NB: All pins for a same I2C peripheral must be on the same port RBX because of PinsForI2cVariable()
};

McuI2cInfo McuI2cInfoPic16F877[] = {                                            // For PIC16F877, 887
//      name,   REG_CTRL, REG_STAT, REG_DATA, REG_RATE,     SCL,    SDA
    { "I2C",    0,          0,          0,          0,      18,     23 },       // I2C = RC3 + RC4
//  NB: All pins for a same I2C peripheral must be on the same port RBX because of PinsForI2cVariable()
};

//-----------------------------------------------------------------------------
// PIC's SPI Info Tables

// Pic16F88 or Pic16F819
McuSpiInfo McuSpiInfoPic16F88[] = {
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB3   PB2  PB1  PB0
    { "SPI",       0,       0,       0,      7,    8,  10,  11 },
};

// Pic16F876 or Pic16F886
McuSpiInfo McuSpiInfoPic16F876[] = {
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB3   PB2  PB1  PB0
    { "SPI",       0,       0,       0,     15,   16,  14,   7 },
};

// Pic16F877 or Pic16F887
McuSpiInfo McuSpiInfoPic16F877[] = {
//     name     REG_CTRL REG_STAT REG_DATA MISO  MOSI SCK  _SS
//                                         PB3   PB2  PB1  PB0
    { "SPI",       0,       0,       0,     23,   24,  18,   7 },
};
/////


//-----------------------------------------------------------------------------
// ATmega164 or ATmega324 or ATmega644 or ATmega1264

McuIoPinInfo AvrAtmega164IoPinInfo[] = {
    { 'B',  0,  1, "", 0, "", 0, 0, 0, 0 },
    { 'B',  1,  2, "", 0, "", 0, 0, 0, 0 },
    { 'B',  2,  3, "", 0, "", 0, 0, 0, 0 },
    { 'B',  3,  4, "", 0, "", 0, 0, 0, 0 },
    { 'B',  4,  5, "", 0, "", 0, 0, 0, 0 },
    { 'B',  5,  6, "", 0, "", 0, 0, 0, 0 },
    { 'B',  6,  7, "", 0, "", 0, 0, 0, 0 },
    { 'B',  7,  8, "", 0, "", 0, 0, 0, 0 },
    { 'D',  0, 14, "", 0, "", 0, 0, 0, 0 },
    { 'D',  1, 15, "", 0, "", 0, 0, 0, 0 },
    { 'D',  2, 16, "", 0, "", 0, 0, 0, 0 },
    { 'D',  3, 17, "", 0, "", 0, 0, 0, 0 },
    { 'D',  4, 18, "", 0, "", 0, 0, 0, 0 },
    { 'D',  5, 19, "", 0, "", 0, 0, 0, 0 },
    { 'D',  6, 20, "", 0, "", 0, 0, 0, 0 },
    { 'D',  7, 21, "", 0, "", 0, 0, 0, 0 },
    { 'C',  0, 22, "", 0, "", 0, 0, 0, 0 },
    { 'C',  1, 23, "", 0, "", 0, 0, 0, 0 },
    { 'C',  2, 24, "", 0, "", 0, 0, 0, 0 },
    { 'C',  3, 25, "", 0, "", 0, 0, 0, 0 },
    { 'C',  4, 26, "", 0, "", 0, 0, 0, 0 },
    { 'C',  5, 27, "", 0, "", 0, 0, 0, 0 },
    { 'C',  6, 28, "", 0, "", 0, 0, 0, 0 },
    { 'C',  7, 29, "", 0, "", 0, 0, 0, 0 },
    { 'A',  7, 33, "", 0, "", 0, 0, 0, 0 },
    { 'A',  6, 34, "", 0, "", 0, 0, 0, 0 },
    { 'A',  5, 35, "", 0, "", 0, 0, 0, 0 },
    { 'A',  4, 36, "", 0, "", 0, 0, 0, 0 },
    { 'A',  3, 37, "", 0, "", 0, 0, 0, 0 },
    { 'A',  2, 38, "", 0, "", 0, 0, 0, 0 },
    { 'A',  1, 39, "", 0, "", 0, 0, 0, 0 },
    { 'A',  0, 40, "", 0, "", 0, 0, 0, 0 },
};

McuAdcPinInfo AvrAtmega164AdcPinInfo[] = {
    { 40, 0x00 },
    { 39, 0x01 },
    { 38, 0x02 },
    { 37, 0x03 },
    { 36, 0x04 },
    { 35, 0x05 },
    { 34, 0x06 },
    { 33, 0x07 },
};
//-----------------------------------------------------------------------------
// A variety of 14-Pin PICs that share the same digital IO assignment.

//-----------------------------------------------------------------------------
// A variety of 18-Pin PICs that share the same digital IO assignment.

McuIoPinInfo Pic18PinIoInfo[] = {
    { 'A',  2,  1, "RA2/AN2/VREF"               , 0, "", 0, 0, 0, 0},
    { 'A',  3,  2, "RA3/AN3/CMP1"               , 0, "", 0, 0, 0, 0},
    { 'A',  4,  3, "RA4/T0CKI/CMP2"             , 0, "", 0, 0, 0, 0},
    { 'A',  5,  4, "RA5/_MCLR/Vpp (Input Only)" , 0, "", 0, 0, 0, 0},
//  { ' ', -1,  5, "Vss"                        , 0, "", 0, 0, 0, 0},
    { 'B',  0,  6, "RB0/INT"                    , 0, "", 0, 0, 0, 0},
    { 'B',  1,  7, "RB1/RX/DT"                  , 0, "", 0, 0, 0, 0},
    { 'B',  2,  8, "RB2/TX/CK"                  , 0, "", 0, 0, 0, 0},
    { 'B',  3,  9, "RB3/CCP1"                   , 0, "", 0, 0, 0, 0},
    { 'B',  4, 10, "RB4"                        , 0, "", 0, 0, 0, 0},
    { 'B',  5, 11, "RB5"                        , 0, "", 0, 0, 0, 0},
    { 'B',  6, 12, "RB6"                        , 0, "", 0, 0, 0, 0},
    { 'B',  7, 13, "RB7"                        , 0, "", 0, 0, 0, 0},
//  { ' ', -1, 14, "Vdd"                        , 0, "", 0, 0, 0, 0},
    { 'A',  6, 15, "RA6/OSC2/CLKOUT"            , 0, "", 0, 0, 0, 0},
    { 'A',  7, 16, "RA7/OSC1/CLKIN"             , 0, "", 0, 0, 0, 0},
    { 'A',  0, 17, "RA0/AN0"                    , 0, "", 0, 0, 0, 0},
    { 'A',  1, 18, "RA1/AN1"                    , 0, "", 0, 0, 0, 0},
};

McuAdcPinInfo Pic16F819AdcPinInfo[] = {
    {  1, 0x02 },
    {  2, 0x03 },
    {  3, 0x04 },
    { 17, 0x00 },
    { 18, 0x01 },
};


//-----------------------------------------------------------------------------
// PIC16F88

McuIoPinInfo Pic16F88PinIoInfo[] = {
    { 'A',  2,  1, "RA2/AN2"                    , 0, "", 0, 0, 0, 0},
    { 'A',  3,  2, "RA3/AN3/CMP1"               , 0, "", 0, 0, 0, 0},
    { 'A',  4,  3, "RA4/AN4/T0CKI/CMP2"         , 0, "", 0, 0, 0, 0},
    { 'A',  5,  4, "RA5/_MCLR/Vpp (Input Only)" , 0, "", 0, 0, 0, 0}, // without pull-up resistor
//  { ' ', -1,  5, "Vss"                        , 0, "", 0, 0, 0, 0},
    { 'B',  0,  6, "RB0/INT"                    , 0, "", 0, 0, 0, 0},
    { 'B',  1,  7, "RB1/SDI/SDA"                , 0, "", 0, 0, 0, 0},
    { 'B',  2,  8, "RB2/SDO/RX/DT"              , 0, "", 0, 0, 0, 0},
    { 'B',  3,  9, "RB3/CCP1"                   , 0, "", 0, 0, 0, 0},
    { 'B',  4, 10, "RB4/SCK/SCL"                , 0, "", 0, 0, 0, 0},
    { 'B',  5, 11, "RB5/_SS/TX/CK"              , 0, "", 0, 0, 0, 0},
    { 'B',  6, 12, "RB6/AN5"                    , 0, "", 0, 0, 0, 0},
    { 'B',  7, 13, "RB7/AN6"                    , 0, "", 0, 0, 0, 0},
//  { ' ', -1, 14, "Vdd"                        , 0, "", 0, 0, 0, 0},
    { 'A',  6, 15, "RA6/OSC2/CLKOUT"            , 0, "", 0, 0, 0, 0},
    { 'A',  7, 16, "RA7/OSC1/CLKIN"             , 0, "", 0, 0, 0, 0},
    { 'A',  0, 17, "RA0/AN0"                    , 0, "", 0, 0, 0, 0},
    { 'A',  1, 18, "RA1/AN1"                    , 0, "", 0, 0, 0, 0},
};

McuAdcPinInfo Pic16F88AdcPinInfo[] = {
    { 17, 0x00 },
    { 18, 0x01 },
    {  1, 0x02 },
    {  2, 0x03 },
    {  3, 0x04 },
    { 12, 0x05 },
    { 13, 0x06 },
};

//-----------------------------------------------------------------------------
// PIC16F1826, PIC16F1827
//-----------------------------------------------------------------------------
// PIC16F877, PIC16F874

McuIoPinInfo Pic16F877IoPinInfo[] = {
    { 'A',  0,  2, "RA0/AN0"        , 0, "", 0, 0, 0, 0},
    { 'A',  1,  3, "RA1/AN1"        , 0, "", 0, 0, 0, 0},
    { 'A',  2,  4, "RA2/AN2/VREF-"  , 0, "", 0, 0, 0, 0},
    { 'A',  3,  5, "RA3/AN3/VREF+"  , 0, "", 0, 0, 0, 0},
    { 'A',  4,  6, "RA4/T0CKI"      , 0, "", 0, 0, 0, 0},
    { 'A',  5,  7, "RA5/AN4/_SS"    , 0, "", 0, 0, 0, 0},
    { 'E',  0,  8, "RE0/_RD/AN5"    , 0, "", 0, 0, 0, 0},
    { 'E',  1,  9, "RE1/_WR/AN6"    , 0, "", 0, 0, 0, 0},
    { 'E',  2, 10, "RE2/_CS/AN7"    , 0, "", 0, 0, 0, 0},
//  {           1, "_MCLR/Vpp"      , 0, "", 0, 0, 0, 0},
    { 'C',  0, 15, "RC0/T1OSO/T1CKI", 0, "", 0, 0, 0, 0},
    { 'C',  1, 16, "RC1/T1OSI/CCP2" , 0, "", 0, 0, 0, 0},
    { 'C',  2, 17, "RC2/CCP1"       , 0, "", 0, 0, 0, 0},
    { 'C',  3, 18, "RC3/SCK/SCL"    , 0, "", 0, 0, 0, 0},
    { 'D',  0, 19, "RD0/PSP0"       , 0, "", 0, 0, 0, 0},
    { 'D',  1, 20, "RD1/PSP1"       , 0, "", 0, 0, 0, 0},
    { 'D',  2, 21, "RD2/PSP2"       , 0, "", 0, 0, 0, 0},
    { 'D',  3, 22, "RD3/PSP3"       , 0, "", 0, 0, 0, 0},
    { 'C',  4, 23, "RC4/SDI/SDA"    , 0, "", 0, 0, 0, 0},
    { 'C',  5, 24, "RC5/SDO"        , 0, "", 0, 0, 0, 0},
    { 'C',  6, 25, "RC6/TX/CK"      , 0, "", 0, 0, 0, 0},
    { 'C',  7, 26, "RC7/RX/DT"      , 0, "", 0, 0, 0, 0},
    { 'D',  4, 27, "RD4/PSP4"       , 0, "", 0, 0, 0, 0},
    { 'D',  5, 28, "RD5/PSP5"       , 0, "", 0, 0, 0, 0},
    { 'D',  6, 29, "RD6/PSP6"       , 0, "", 0, 0, 0, 0},
    { 'D',  7, 30, "RD7/PSP7"       , 0, "", 0, 0, 0, 0},
    { 'B',  0, 33, "RB0/INT"        , 0, "", 0, 0, 0, 0},
    { 'B',  1, 34, "RB1"            , 0, "", 0, 0, 0, 0},
    { 'B',  2, 35, "RB2"            , 0, "", 0, 0, 0, 0},
    { 'B',  3, 36, "RB3"            , 0, "", 0, 0, 0, 0},
    { 'B',  4, 37, "RB4"            , 0, "", 0, 0, 0, 0},
    { 'B',  5, 38, "RB5"            , 0, "", 0, 0, 0, 0},
    { 'B',  6, 39, "RB6"            , 0, "", 0, 0, 0, 0},
    { 'B',  7, 40, "RB7"            , 0, "", 0, 0, 0, 0}
};

McuAdcPinInfo Pic16F877AdcPinInfo[] = {
    {  2,   0x00 },
    {  3,   0x01 },
    {  4,   0x02 },
    {  5,   0x03 },
    {  7,   0x04 },
    {  8,   0x05 },
    {  9,   0x06 },
    { 10,   0x07 },
};

//-----------------------------------------------------------------------------
// PIC16F72 28-Pin PDIP, SOIC, SSOP

//-----------------------------------------------------------------------------
// PIC16F876, PIC16F873 28-Pin PDIP, SOIC
McuIoPinInfo Pic16F876IoPinInfo[] = {
    { 'A', 0,  2 , "", 0, "", 0, 0, 0, 0},
    { 'A', 1,  3 , "", 0, "", 0, 0, 0, 0},
    { 'A', 2,  4 , "", 0, "", 0, 0, 0, 0},
    { 'A', 3,  5 , "", 0, "", 0, 0, 0, 0},
    { 'A', 4,  6 , "", 0, "", 0, 0, 0, 0},
    { 'A', 5,  7 , "", 0, "", 0, 0, 0, 0},
    { 'C', 0, 11 , "", 0, "", 0, 0, 0, 0},
    { 'C', 1, 12 , "", 0, "", 0, 0, 0, 0},
    { 'C', 2, 13 , "", 0, "", 0, 0, 0, 0},
    { 'C', 3, 14 , "", 0, "", 0, 0, 0, 0},
    { 'C', 4, 15 , "", 0, "", 0, 0, 0, 0},
    { 'C', 5, 16 , "", 0, "", 0, 0, 0, 0},
    { 'C', 6, 17 , "", 0, "", 0, 0, 0, 0},
    { 'C', 7, 18 , "", 0, "", 0, 0, 0, 0},
    { 'B', 0, 21 , "", 0, "", 0, 0, 0, 0},
    { 'B', 1, 22 , "", 0, "", 0, 0, 0, 0},
    { 'B', 2, 23 , "", 0, "", 0, 0, 0, 0},
    { 'B', 3, 24 , "", 0, "", 0, 0, 0, 0},
    { 'B', 4, 25 , "", 0, "", 0, 0, 0, 0},
    { 'B', 5, 26 , "", 0, "", 0, 0, 0, 0},
    { 'B', 6, 27 , "", 0, "", 0, 0, 0, 0},
    { 'B', 7, 28 , "", 0, "", 0, 0, 0, 0},
};

McuAdcPinInfo Pic16F876AdcPinInfo[] = {
    {  2, 0x00 },
    {  3, 0x01 },
    {  4, 0x02 },
    {  5, 0x03 },
    {  7, 0x04 }
};

//-----------------------------------------------------------------------------
// PIC16F887, PIC16F884

McuIoPinInfo Pic16F887IoPinInfo[] = {
    { 'A',  0,  2, "RA0/AN0/ULPWU/C12IN0-"      , 0, "", 0, 0, 0, 0},
    { 'A',  1,  3, "RA1/AN1/C12IN1-"            , 0, "", 0, 0, 0, 0},
    { 'A',  2,  4, "RA2/AN2/VREF-/CVREF/C2IN+"  , 0, "", 0, 0, 0, 0},
    { 'A',  3,  5, "RA3/AN3/VREF+/C1IN+"        , 0, "", 0, 0, 0, 0},
    { 'A',  4,  6, "RA4/T0CKI/C1OUT"            , 0, "", 0, 0, 0, 0},
    { 'A',  5,  7, "RA5/AN4/_SS/C2OUT"          , 0, "", 0, 0, 0, 0},
    { 'E',  0,  8, "RE0/AN5"                    , 0, "", 0, 0, 0, 0},
    { 'E',  1,  9, "RE1/AN6"                    , 0, "", 0, 0, 0, 0},
    { 'E',  2, 10, "RE2/AN7"                    , 0, "", 0, 0, 0, 0},
    { 'E',  3,  1, "RE3/_MCLR/Vpp (Input Only)" , 0, "", 0, 0, 0, 0},
    { 'A',  7, 13, "RA7/OSC1/CLKIN"             , 0, "", 0, 0, 0, 0},
    { 'A',  6, 14, "RA6/OSC2/CLKOUT"            , 0, "", 0, 0, 0, 0},
    { 'C',  0, 15, "RC0/T1OSO/T1CKI"            , 0, "", 0, 0, 0, 0},
    { 'C',  1, 16, "RC1/T1OSI/CCP2"             , 0, "", 0, 0, 0, 0},
    { 'C',  2, 17, "RC2/P1A/CCP1"               , 0, "", 0, 0, 0, 0},
    { 'C',  3, 18, "RC3/SCK/SCL"                , 0, "", 0, 0, 0, 0},
    { 'D',  0, 19, "RD0"                        , 0, "", 0, 0, 0, 0},
    { 'D',  1, 20, "RD1"                        , 0, "", 0, 0, 0, 0},
    { 'D',  2, 21, "RD2"                        , 0, "", 0, 0, 0, 0},
    { 'D',  3, 22, "RD3"                        , 0, "", 0, 0, 0, 0},
    { 'C',  4, 23, "RC4/SDI/SDA"                , 0, "", 0, 0, 0, 0},
    { 'C',  5, 24, "RC5/SDO"                    , 0, "", 0, 0, 0, 0},
    { 'C',  6, 25, "RC6/TX/CK"                  , 0, "", 0, 0, 0, 0},
    { 'C',  7, 26, "RC7/RX/DT"                  , 0, "", 0, 0, 0, 0},
    { 'D',  4, 27, "RD4"                        , 0, "", 0, 0, 0, 0},
    { 'D',  5, 28, "RD5/P1B"                    , 0, "", 0, 0, 0, 0},
    { 'D',  6, 29, "RD6/P1C"                    , 0, "", 0, 0, 0, 0},
    { 'D',  7, 30, "RD7/P1D"                    , 0, "", 0, 0, 0, 0},
    { 'B',  0, 33, "RB0/AN12/INT"               , 0, "", 0, 0, 0, 0},
    { 'B',  1, 34, "RB1/AN10/C12IN3-"           , 0, "", 0, 0, 0, 0},
    { 'B',  2, 35, "RB2/AN8"                    , 0, "", 0, 0, 0, 0},
    { 'B',  3, 36, "RB3/AN9/C12IN2-"            , 0, "", 0, 0, 0, 0},
    { 'B',  4, 37, "RB4/AN11"                   , 0, "", 0, 0, 0, 0},
    { 'B',  5, 38, "RB5/AN13/_T1G"              , 0, "", 0, 0, 0, 0},
    { 'B',  6, 39, "RB6/ICSPCLK"                , 0, "", 0, 0, 0, 0},
    { 'B',  7, 40, "RB7/ICSPDAT"                , 0, "", 0, 0, 0, 0}
};

McuAdcPinInfo Pic16F887AdcPinInfo[] = {
    {  2,   0x00 },
    {  3,   0x01 },
    {  4,   0x02 },
    {  5,   0x03 },
    {  7,   0x04 },
    {  8,   0x05 },
    {  9,   0x06 },
    { 10,   0x07 },
    { 33,   0x0c },
    { 34,   0x0a },
    { 35,   0x08 },
    { 36,   0x09 },
    { 37,   0x0b },
    { 38,   0x0d },
};


//-----------------------------------------------------------------------------
// 28-Pin PDIP, SOIC, SSOP
// PIC16F886,  PIC16F883, PIC16F882
// PIC16F1512, PIC16F1513
// PIC16F1516, PIC16F1518

McuIoPinInfo Pic28Pin_SPDIP_SOIC_SSOP[] = {
    { 'E', 3,  1, "RE3/_MCLR/Vpp (Input Only)"  , 0, "", 0, 0, 0, 0},
    { 'A', 0,  2, "RA0/AN0/ULPWU/C12IN0-"       , 0, "", 0, 0, 0, 0},
    { 'A', 1,  3, "RA1/AN1/C12IN1-"             , 0, "", 0, 0, 0, 0},
    { 'A', 2,  4, "RA2/AN2/VREF-/CVREF/C2IN+"   , 0, "", 0, 0, 0, 0},
    { 'A', 3,  5, "RA3/AN3/VREF+/C1IN+"         , 0, "", 0, 0, 0, 0},
    { 'A', 4,  6, "RA4/T0CKI/C1OUT"             , 0, "", 0, 0, 0, 0},
    { 'A', 5,  7, "RA5/AN4/_SS/C2OUT"           , 0, "", 0, 0, 0, 0},
//  {          8, "Vss"                         , 0, "", 0, 0, 0, 0},
    { 'A', 7,  9, "RA7/OSC2/CLKOUT"             , 0, "", 0, 0, 0, 0},
    { 'A', 6, 10, "RA6/OSC1/CLKIN"              , 0, "", 0, 0, 0, 0},
    { 'C', 0, 11, "RC0/T1OSO/T1CKI"             , 0, "", 0, 0, 0, 0},
    { 'C', 1, 12, "RC1/T1OSI/CCP2"              , 0, "", 0, 0, 0, 0},
    { 'C', 2, 13, "RC2/P1A/CCP1"                , 0, "", 0, 0, 0, 0},
    { 'C', 3, 14, "RC3/SCK/SCL"                 , 0, "", 0, 0, 0, 0},
    { 'C', 4, 15, "RC4/SDI/SDA"                 , 0, "", 0, 0, 0, 0},
    { 'C', 5, 16, "RC5/SDO"                     , 0, "", 0, 0, 0, 0},
    { 'C', 6, 17, "RC6/TX/CK"                   , 0, "", 0, 0, 0, 0},
    { 'C', 7, 18, "RC7/RX/DT"                   , 0, "", 0, 0, 0, 0},
//  {         19, "Vss"                         , 0, "", 0, 0, 0, 0},
//  {         20, "Vdd"                         , 0, "", 0, 0, 0, 0},
    { 'B', 0, 21, "RB0/AN12/INT"                , 0, "", 0, 0, 0, 0},
    { 'B', 1, 22, "RB1/AN10/P1C/C12IN3-"        , 0, "", 0, 0, 0, 0},
    { 'B', 2, 23, "RB2/AN8/P1B"                 , 0, "", 0, 0, 0, 0},
    { 'B', 3, 24, "RB3/AN9/C12IN2-"             , 0, "", 0, 0, 0, 0},
    { 'B', 4, 25, "RB4/AN11/P1D"                , 0, "", 0, 0, 0, 0},
    { 'B', 5, 26, "RB5/AN13/_T1G"               , 0, "", 0, 0, 0, 0},
    { 'B', 6, 27, "RB6/ICSPCLK"                 , 0, "", 0, 0, 0, 0},
    { 'B', 7, 28, "RB7/ICSPDAT"                 , 0, "", 0, 0, 0, 0}
};

McuAdcPinInfo Pic16F886AdcPinInfo[] = {
    {  2, 0x00 },
    {  3, 0x01 },
    {  4, 0x02 },
    {  5, 0x03 },
    {  7, 0x04 },
    { 21, 0x0c },
    { 22, 0x0a },
    { 23, 0x08 },
    { 24, 0x09 },
    { 25, 0x0b },
    { 26, 0x0d },
};

//-----------------------------------------------------------------------------
// PIC16F1512, PIC16F1513, PIC16F1516, PIC16F1518
//-----------------------------------------------------------------------------
// PIC16F1526, PIC16F1527

//-----------------------------------------------------------------------------
// 6-Pin SOT-23
// PIC10F200, PIC10F202, PIC10F204, PIC10F206
// PIC10F220, PIC10F222
McuIoPinInfo Pic6Pin_SOT23[] = {
    { 'P', 0, 1, "GP0/ICSPDAT"                , 0, "", 0, 0, 0, 0},
    { 'P', 1, 3, "GP1/ICSPCLK"                , 0, "", 0, 0, 0, 0},
    { 'P', 2, 4, "GP2/T0CKI/FOSC4"            , 0, "", 0, 0, 0, 0},
    { 'P', 3, 6, "GP3/_MCLR/Vpp (Input Only)" , 0, "", 0, 0, 0, 0},
};

//-----------------------------------------------------------------------------
// 8-Pin PDIP, SOIC, DFN-S, DFN
// PIC12F629
// PIC12F675
// PIC12F683
// PIC12F752
McuIoPinInfo Pic8Pin[] = {
    { 'P', 0, 7, "GP0/AN0/CIN+/ICSPDAT" },
    { 'P', 1, 6, "GP1/AN1/CIN-/VREF/ICSPCLK" },
    { 'P', 2, 5, "GP2/AN2/T0CKI/INT/COUT" },
    { 'P', 3, 4, "GP3/_MCLR/Vpp" },
    { 'P', 4, 3, "GP4/AN3/_T1G/OSC2/CLKOUT" },
    { 'P', 5, 2, "GP5/T1CKI/OSC1/CLKIN" },
};

McuAdcPinInfo Pic8PinAdcPinInfo[] = {
    {  7, 0x00 },
    {  6, 0x01 },
    {  5, 0x02 },
    {  3, 0x03 },
};
//-----------------------------------------------------------------------------
// ESP8266
McuIoPinInfo ESP8266IoPinInfo[] = {
//   port bit pin pinName
//  { ' ',  0,  1, "RST"},
    { 'A',  0,  2, "ADC"},
    { ' ',  0,  3, "EN"},
    { 'O', 16,  4, "GPIO16/WAKE"},
    { 'O', 14,  5, "GPIO14/SCL"},
    { 'O', 12,  6, "GPIO12"},
    { 'O', 13,  7, "GPIO13"},
//  { ' ',  0,  8, "VCC"},
    { ' ',  0,  9, "GPIO11/CS0"},
    { ' ',  0, 10, "GPIO7/MISO"},
    { ' ',  0, 11, "GPIO9"},
    { ' ',  0, 12, "GPIO10"},
    { ' ',  0, 13, "GPIO8/MOSI"},
    { ' ',  0, 14, "GPIO6/SCLK"},
//  { ' ',  0, 15, "GND"},
    { 'O', 15, 16, "GPIO15"},
    { 'O',  2, 17, "GPIO2/SDA"},
    { 'O',  0, 18, "GPIO0"},
    { 'O',  4, 19, "GPIO4"},
    { 'O',  5, 20, "GPIO5"},
    { 'O',  3, 21, "GPIO3/RXD0"},
    { 'O',  1, 22, "GPIO1/TXD0"},
};

McuAdcPinInfo ESP8266AdcPinInfo[] = {
    { 2, 0x00 },
};
/*
McuPwmPinInfo ESP8266PwmPinInfo[] = {
////     ti
//// pin mer
//  {  1, 0 },
};
*/
//-----------------------------------------------------------------------------
// Controllino Maxi
McuIoPinInfo ControllinoMaxiIoPinInfo[] = {
//   port bit pin pinName ArduinoPin
///// the lack of TX and RX defined pins generates a big crash when trying to use UART SEND/RECV (Note by JG)
    { 'E',  4,  6, "D0",  2  , "", 0, 0, 0, 0},
    { 'E',  5,  7, "D1",  3  , "", 0, 0, 0, 0},
    { 'G',  5,  1, "D2",  4  , "", 0, 0, 0, 0},
    { 'E',  3,  5, "D3",  5  , "", 0, 0, 0, 0},
    { 'H',  3, 15, "D4",  6  , "", 0, 0, 0, 0},
    { 'H',  4, 16, "D5",  7  , "", 0, 0, 0, 0},
    { 'H',  5, 17, "D6",  8  , "", 0, 0, 0, 0},
    { 'H',  6, 18, "D7",  9  , "", 0, 0, 0, 0},
    { 'B',  4, 23, "D8",  10 , "", 0, 0, 0, 0},
    { 'B',  5, 24, "D9",  11 , "", 0, 0, 0, 0},
    { 'B',  6, 25, "D10", 12 , "", 0, 0, 0, 0},
    { 'B',  7, 26, "D11", 13 , "", 0, 0, 0, 0},
    { 'A',  0, 78, "R0",  22 , "", 0, 0, 0, 0},
    { 'A',  1, 77, "R1",  23 , "", 0, 0, 0, 0},
    { 'A',  2, 76, "R2",  24 , "", 0, 0, 0, 0},
    { 'A',  3, 75, "R3",  25 , "", 0, 0, 0, 0},
    { 'A',  4, 74, "R4",  26 , "", 0, 0, 0, 0},
    { 'A',  5, 73, "R5",  27 , "", 0, 0, 0, 0},
    { 'A',  6, 72, "R6",  28 , "", 0, 0, 0, 0},
    { 'C',  6, 59, "R9",  29 , "", 0, 0, 0, 0},
    { 'A',  7, 71, "R7",  30 , "", 0, 0, 0, 0},
    { 'C',  7, 60, "R8",  31 , "", 0, 0, 0, 0},
    { 'F',  0, 97, "A0",  54 , "", 0, 0, 0, 0},
    { 'F',  1, 96, "A1",  55 , "", 0, 0, 0, 0},
    { 'F',  2, 95, "A2",  56 , "", 0, 0, 0, 0},
    { 'F',  3, 94, "A3",  57 , "", 0, 0, 0, 0},
    { 'F',  4, 93, "A4",  58 , "", 0, 0, 0, 0},
    { 'F',  5, 92, "A5",  59 , "", 0, 0, 0, 0},
    { 'F',  6, 91, "A6",  60 , "", 0, 0, 0, 0},
    { 'F',  7, 90, "A7",  61 , "", 0, 0, 0, 0},
    { 'K',  0, 89, "A8",  62 , "", 0, 0, 0, 0},
    { 'K',  1, 88, "A9",  63 , "", 0, 0, 0, 0},
};

McuAdcPinInfo ControllinoMaxiAdcPinInfo[] = {
    { 97, 0x00 },
    { 96, 0x01 },
    { 95, 0x02 },
    { 94, 0x03 },
    { 93, 0x04 },
    { 92, 0x05 },
    { 91, 0x06 },
    { 90, 0x07 },
    { 89, 0x08 },
    { 88, 0x09 }
};

McuPwmPinInfo ControllinoMaxiPwmPinInfo[] = {
////ATmega2560
////     ti
//// pin mer
    {  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 25, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 26, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 18, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    {  5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    {  6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    {  7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 15, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 17, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 38, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 39, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
    { 40, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "" },
};

///// Added by JG       // A completer
//-----------------------------------------------------------------------------
McuIoPinInfo ArmSTM32F40X_144LQFPIoPinInfo[] = {
//  ARM STM32F40X
    { 'A',  0, 34, "PA00 (TX4)"                     , 0, "", 0, 0, 0, 0},
    { 'A',  1, 35, "PA01 (RX4)"                     , 0, "", 0, 0, 0, 0},
    { 'A',  2,  36, "PA02 (TX2)"                    , 0, "", 0, 0, 0, 0},
    { 'A',  3, 37, "PA03 (RX2)"                     , 0, "", 0, 0, 0, 0},
    { 'A',  4, 40, "PA04 (ADC1.4)"                  , 0, "", 0, 0, 0, 0},
    { 'A',  5, 41, "PA05 (ADC1.5) (SCK1) (PWM2.1)"  , 0, "", 0, 0, 0, 0},
    { 'A',  6,  42, "PA06 (ADC1.6) (MISO1)"         , 0, "", 0, 0, 0, 0},
    { 'A',  7, 43, "PA07 (MOSI1)"                   , 0, "", 0, 0, 0, 0},
    { 'A',  8, 100, "PA08"                          , 0, "", 0, 0, 0, 0},
    { 'A',  9, 101, "PA09 (TX1)"                    , 0, "", 0, 0, 0, 0},
    { 'A',  10,  102, "PA10 (RX1)"                  , 0, "", 0, 0, 0, 0},
    { 'A',  11, 103, "PA11"                         , 0, "", 0, 0, 0, 0},
    { 'A',  12, 104, "PA12"                         , 0, "", 0, 0, 0, 0},
    { 'A',  13, 105, "PA013"                        , 0, "", 0, 0, 0, 0},
    { 'A',  14, 109, "PA14"                         , 0, "", 0, 0, 0, 0},
    { 'A',  15, 110, "PA15"                         , 0, "", 0, 0, 0, 0},
    { 'B',  0, 45, "PB00"                           , 0, "", 0, 0, 0, 0},
    { 'B',  1, 46, "PB01"                           , 0, "", 0, 0, 0, 0},
    { 'B',  2,  47, "PB02"                          , 0, "", 0, 0, 0, 0},
    { 'B',  3, 133, "PB03 (PWM2.2)"                 , 0, "", 0, 0, 0, 0},
    { 'B',  4, 134, "PB04 (ADC2.4)"                 , 0, "", 0, 0, 0, 0},
    { 'B',  5, 135, "PB05 (ADC2.5)"                 , 0, "", 0, 0, 0, 0},
    { 'B',  6, 136, "PB06 (ADC2.6)"                 , 0, "", 0, 0, 0, 0},
    { 'B',  7, 137, "PB07"                          , 0, "", 0, 0, 0, 0},
    { 'B',  8, 139, "PB08 (SCL1)"                   , 0, "", 0, 0, 0, 0},
    { 'B',  9, 140, "PB09 (SDA1)"                   , 0, "", 0, 0, 0, 0},
    { 'B',  10, 39, "PB10 (TX3) (SCK2) (PWM2.3)"    , 0, "", 0, 0, 0, 0},
    { 'B',  11, 70, "PB11 (RX3) (PWM2.4)"           , 0, "", 0, 0, 0, 0},
    { 'B',  12, 73, "PB12 (CS1)"                    , 0, "", 0, 0, 0, 0},
    { 'B',  13, 74, "PB13"                          , 0, "", 0, 0, 0, 0},
    { 'B',  14, 75, "PB14"                          , 0, "", 0, 0, 0, 0},
    { 'B',  15, 76, "PB15"                          , 0, "", 0, 0, 0, 0},
    { 'C',  0, 26, "PC00"                           , 0, "", 0, 0, 0, 0},
    { 'C',  1, 27, "PC01"                           , 0, "", 0, 0, 0, 0},
    { 'C',  2,  28, "PC02 (MISO2)"                  , 0, "", 0, 0, 0, 0},
    { 'C',  3, 29, "PC03 (MOSI2)"                   , 0, "", 0, 0, 0, 0},
    { 'C',  4, 44, "PC04"                           , 0, "", 0, 0, 0, 0},
    { 'C',  5, 45, "PC05"                           , 0, "", 0, 0, 0, 0},
    { 'C',  6,  96, "PC06 (TX6)"                    , 0, "", 0, 0, 0, 0},
    { 'C',  7, 97, "PC07 (RX6)"                     , 0, "", 0, 0, 0, 0},
    { 'C',  8, 98, "PC08"                           , 0, "", 0, 0, 0, 0},
    { 'C',  9, 99, "PC09"                           , 0, "", 0, 0, 0, 0},
    { 'C',  10,  111, "PC10"                        , 0, "", 0, 0, 0, 0},
    { 'C',  11, 112, "PC11"                         , 0, "", 0, 0, 0, 0},
    { 'C',  12, 113, "PC12 (TX5)"                   , 0, "", 0, 0, 0, 0},
    { 'C',  13, 7, "PC13"                           , 0, "", 0, 0, 0, 0},
    { 'C',  14,  8, "PC14"                          , 0, "", 0, 0, 0, 0},
    { 'C',  15, 9, "PC15 (CS3)"                     , 0, "", 0, 0, 0, 0},
    { 'D',  0, 114, "PD00"                          , 0, "", 0, 0, 0, 0},
    { 'D',  1, 115, "PD01"                          , 0, "", 0, 0, 0, 0},
    { 'D',  2, 116, "PD02 (RX5)"                    , 0, "", 0, 0, 0, 0},
    { 'D',  3, 117, "PD03"                          , 0, "", 0, 0, 0, 0},
    { 'D',  4, 118, "PD04"                          , 0, "", 0, 0, 0, 0},
    { 'D',  5, 119, "PD05"                          , 0, "", 0, 0, 0, 0},
    { 'D',  6, 122, "PD06"                          , 0, "", 0, 0, 0, 0},
    { 'D',  7, 123, "PD07"                          , 0, "", 0, 0, 0, 0},
    { 'D',  8, 77, "PD08"                           , 0, "", 0, 0, 0, 0},
    { 'D',  9, 78, "PD09"                           , 0, "", 0, 0, 0, 0},
    { 'D',  10, 79, "PD10"                          , 0, "", 0, 0, 0, 0},
    { 'D',  11, 80, "PD11"                          , 0, "", 0, 0, 0, 0},
    { 'D',  12, 81, "PD12 (PWM4.1)"                 , 0, "", 0, 0, 0, 0},
    { 'D',  13, 82, "PD13 (PWM4.2)"                 , 0, "", 0, 0, 0, 0},
    { 'D',  14, 85, "PD14 (PWM4.3"                  , 0, "", 0, 0, 0, 0},
    { 'D',  15, 86, "PD15 (PWM4.4)"                 , 0, "", 0, 0, 0, 0},
    { 'E',  0, 141, "PE00"                          , 0, "", 0, 0, 0, 0},
    { 'E',  1, 142, "PE01"                          , 0, "", 0, 0, 0, 0},
    { 'E',  2,  1, "PE02"                           , 0, "", 0, 0, 0, 0},
    { 'E',  3,  2, "PE03"                           , 0, "", 0, 0, 0, 0},
    { 'E',  4,  3, "PE04"                           , 0, "", 0, 0, 0, 0},
    { 'E',  5,  4, "PE05"                           , 0, "", 0, 0, 0, 0},
    { 'E',  6,  5, "PE06"                           , 0, "", 0, 0, 0, 0},
    { 'E',  7, 58, "PE07"                           , 0, "", 0, 0, 0, 0},
    { 'E',  8, 59, "PE08"                           , 0, "", 0, 0, 0, 0},
    { 'E',  9, 60, "PE09 (PWM1.1)"                  , 0, "", 0, 0, 0, 0},
    { 'E',  10, 63, "PE10 (PWM1.2)"                 , 0, "", 0, 0, 0, 0},
    { 'E',  11, 64, "PE11"                          , 0, "", 0, 0, 0, 0},
    { 'E',  12, 65, "PE12"                          , 0, "", 0, 0, 0, 0},
    { 'E',  13, 66, "PE13 (PWM1.3)"                 , 0, "", 0, 0, 0, 0},
    { 'E',  14, 67, "PE14 (PWM1.4)"                 , 0, "", 0, 0, 0, 0},
    { 'E',  15, 68, "PE15"                          , 0, "", 0, 0, 0, 0},
    { 'F',  0, 10, "PF00 (SDA2)"                    , 0, "", 0, 0, 0, 0},
    { 'F',  1, 11, "PF01 (SCL2)"                    , 0, "", 0, 0, 0, 0},
    { 'F',  2, 12, "PF02"                           , 0, "", 0, 0, 0, 0},
    { 'F',  3, 13, "PF03"                           , 0, "", 0, 0, 0, 0},
    { 'F',  4, 14, "PF04"                           , 0, "", 0, 0, 0, 0},
    { 'F',  5, 15, "PF05"                           , 0, "", 0, 0, 0, 0},
    { 'F',  6, 18, "PF06"                           , 0, "", 0, 0, 0, 0},
    { 'F',  7, 19, "PF07"                           , 0, "", 0, 0, 0, 0},
    { 'F',  8, 20, "PF08 (ADC3.6)"                  , 0, "", 0, 0, 0, 0},
    { 'F',  9, 21, "PF09 (ADC3.7)"                  , 0, "", 0, 0, 0, 0},
    { 'F',  10, 22, "PF10 (ADC3.8)"                 , 0, "", 0, 0, 0, 0},
    { 'F',  11, 49, "PF11"                          , 0, "", 0, 0, 0, 0},
    { 'F',  12, 50, "PF12"                          , 0, "", 0, 0, 0, 0},
    { 'F',  13, 53, "PF13"                          , 0, "", 0, 0, 0, 0},
    { 'F',  14, 54, "PF14"                          , 0, "", 0, 0, 0, 0},
    { 'F',  15, 55, "PF15"                          , 0, "", 0, 0, 0, 0},
    { 'G',  0, 56, "PG00"                           , 0, "", 0, 0, 0, 0},
    { 'G',  1, 57, "PG01"                           , 0, "", 0, 0, 0, 0},
    { 'G',  2, 87, "PG02"                           , 0, "", 0, 0, 0, 0},
    { 'G',  3, 88, "PG03"                           , 0, "", 0, 0, 0, 0},
    { 'G',  4, 89, "PG04"                           , 0, "", 0, 0, 0, 0},
    { 'G',  5, 90, "PG05"                           , 0, "", 0, 0, 0, 0},
    { 'G',  6, 91, "PG06"                           , 0, "", 0, 0, 0, 0},
    { 'G',  7, 92, "PG07"                           , 0, "", 0, 0, 0, 0},
    { 'G',  8, 93, "PG08"                           , 0, "", 0, 0, 0, 0},
    { 'G',  9, 124, "PG09"                          , 0, "", 0, 0, 0, 0},
    { 'G',  10, 125, "PG10 (CS2)"                   , 0, "", 0, 0, 0, 0},
    { 'G',  11, 126, "PG11"                         , 0, "", 0, 0, 0, 0},
    { 'G',  12, 128, "PG12"                         , 0, "", 0, 0, 0, 0},
    { 'G',  13, 128, "PG13"                         , 0, "", 0, 0, 0, 0},
    { 'G',  14, 129, "PG14"                         , 0, "", 0, 0, 0, 0},
    { 'G',  15, 132, "PG15"                         , 0, "", 0, 0, 0, 0}
};

McuAdcPinInfo ArmSTM32F40X_144LQFPAdcPinInfo[] = {
//  ARM STM32F40X
//  {pin, channel}
    { 40, 0x04 },       // ADC1 channel 4 on PA4
    { 41, 0x05 },       // ADC1 channel 5 on PA5
    { 42, 0x06 },       // ADC1 channel 6 on PA6
    { 134, 0x04 },      // ADC2 channel 4 on PA4        // appears as PB4 because of ADC1
    { 135, 0x05 },      // ADC2 channel 5 on PA5        // appears as PB5 because of ADC1
    { 136, 0x06 },      // ADC2 channel 6 on PA4        // appears as PB5 because of ADC1
    { 20, 0x06 },       // ADC3 channel 6 on PF8
    { 21, 0x07 },       // ADC3 channel 7 on PF9
    { 22, 0x08 }        // ADC3 channel 8 on PF10
};

McuPwmPinInfo ArmSTM32F40X_144LQFPPwmPinInfo[] = {
//  ARM STM32F40X
//  {pin, timer, resol}
    { 81, 4, 16 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""},
    { 82, 4, 16 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""},
    { 85, 4, 16 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""},
    { 86, 4, 16 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""},
    { 41, 2, 32 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""},
    { 133,2, 32 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""},
    { 39, 2, 32 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""},
    { 70, 2, 32 , 0, 0, 0, 0, 0, 0, 0, 0, 0, ""}
};

McuSpiInfo ArmSTM32F40X_144LQFPMcuSpiInfo[] = {
//  name, REG_CTRL, REG_STAT, REG_DATA, MISO, MOSI, SCK, CS
    { "SPI1", 0, 0, 0, 42, 43, 41, 73 },            // SPI1 = PA6 + PA7 + PA5 + PB12
    { "SPI2", 0, 0, 0, 28, 29, 39, 125 },           // SPI2 = PC2 + PC3 + PB10 + PG10
    { "SPI3", 0, 0, 0, 28, 29, 39, 9 },             // SPI2 = PB4 + PB5 + PB3 + PC15
//  NB: CS is in fact user defined - if need be - (software CS) but a pin must be declared
//  NB: All pins for a same SPI peripheral must be on the same port PX because of PinsForSpiVariable()
};

McuI2cInfo ArmSTM32F40X_144LQFPMcuI2cInfo[] = {
//  name, REG_CTRL, REG_STAT, REG_DATA, REG_RATE, SCL, SDA
    {"I2C1", 0, 0, 0, 0, 139, 140 },                // I2C1 = PB8 + PB9
    {"I2C2", 0, 0, 0, 0, 11, 10 },                  // I2C2 = PF1 + PF0
//  {"I2C3", 0, 0, 0, 0, 0, 0 }                     // I2C3 = PH7 + PH8
//  NB: All pins for a same I2C peripheral must be on the same port PX because of PinsForI2cVariable()
};
/////


//-----------------------------------------------------------------------------
// PC LPT & COM
McuIoPinInfo PcCfg[] = {
// Dynamically loaded by LoadPcPorts() in psports.cpp
//   port; bit; pin; pinName; ArduinoPin; ArduinoName; pinFunctions; pinUsed;  portN; dbPin; ioType
    { 'L',   0,   1,      "",          0,          "",/*          0,       0,*/    1,     2,      2, 0},
};

//===========================================================================
McuIoInfo SupportedMcus_[] = {
    {
        "Atmel AVR ATmega2560 100-TQFP",
        "ATmega2560",
        "m2560def",
        "mega2560",
        "",
        'P',
//        A     B     C     D     E     F     G     H      I   J      K      L
        { 0x20, 0x23, 0x26, 0x29, 0x2C, 0x2F, 0x32, 0x100, 0,  0x103, 0x106, 0x109 }, // PINx  input
        { 0x22, 0x25, 0x28, 0x2B, 0x2E, 0x32, 0x34, 0x102, 0,  0x105, 0x108, 0x10B }, // PORTx output
        { 0x21, 0x24, 0x27, 0x2A, 0x2D, 0x30, 0x33, 0x101, 0,  0x104, 0x107, 0x10A }, // DDRx  dir
        128*1024,
        { { 0x200, 8192 } },
        AvrAtmega2560_100TQFPIoPinInfo,
        arraylen(AvrAtmega2560_100TQFPIoPinInfo),
        AvrAtmega2560_100TQFPAdcPinInfo,
        arraylen(AvrAtmega2560_100TQFPAdcPinInfo),
        1023,
        { 2 , 3 },
        23,
        ISA_AVR,
        EnhancedCore4M,
        100,
        0,
        AvrAtmega2560PwmPinInfo,
        arraylen(AvrAtmega2560PwmPinInfo),
        nullptr,
        0,
        McuSpiInfoATmega2560,
        arraylen(McuSpiInfoATmega2560),
        McuI2cInfoATmega2560,
        arraylen(McuI2cInfoATmega2560),
        {{0,0}}
    },
    {
        "Atmel AVR AT90USB647 64-TQFP",
        "AT90USB647",
        "",
        "",
        "",
        'P',
        { 0x20, 0x23, 0x26, 0x29, 0x2C, 0x2F }, // PINx
        { 0x22, 0x25, 0x28, 0x2B, 0x2E, 0x31 }, // PORTx
        { 0x21, 0x24, 0x27, 0x2A, 0x2D, 0x30 }, // DDRx
        64*1024,
        { { 0x100, 4096 } },
        AvrAT90USB647_64TQFPIoPinInfo,
        arraylen(AvrAT90USB647_64TQFPIoPinInfo),
        AvrAT90USB647_64TQFPAdcPinInfo,
        arraylen(AvrAT90USB647_64TQFPAdcPinInfo),
        1023,
        { 27, 28 },
        17,
        ISA_AVR,
        EnhancedCore128K, //???
        64,
        0,
        AvrPwmPinInfo64_,
        arraylen(AvrPwmPinInfo64_),
        nullptr,
        0,
        nullptr,
        0,
        nullptr,
        0,
        {{0,0}}
    },
    {
        "Atmel AVR ATmega128 64-TQFP",
        "ATmega128",
        "",
        "",
        "",
        'P',
//        A     B     C     D     E     F     G     H      I   J      K      L
        { 0x39, 0x36, 0x33, 0x30, 0x21, 0x20, 0x63 }, // PINx
        { 0x3b, 0x38, 0x35, 0x32, 0x23, 0x62, 0x65 }, // PORTx
        { 0x3a, 0x37, 0x34, 0x31, 0x22, 0x61, 0x64 }, // DDRx
        64*1024,
        { { 0x100, 4096 } },
        AvrAtmega128_64TQFPIoPinInfo,
        arraylen(AvrAtmega128_64TQFPIoPinInfo),
        AvrAtmega128_64TQFPAdcPinInfo,
        arraylen(AvrAtmega128_64TQFPAdcPinInfo),
        1023,
        { 27, 28 },
        17,
        ISA_AVR,
        EnhancedCore128K,
        64,
        0,
        AvrPwmPinInfo64_,
        arraylen(AvrPwmPinInfo64_),
        nullptr,
        0,
        McuSpiInfoATmega64,
        arraylen(McuSpiInfoATmega64),
        McuI2cInfoATmega64,
        arraylen(McuI2cInfoATmega64),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega64 64-TQFP",
        "ATmega64",
        "",
        "",
        "",
        'P',
        { 0x39, 0x36, 0x33, 0x30, 0x21, 0x20, 0x63 }, // PINx
        { 0x3b, 0x38, 0x35, 0x32, 0x23, 0x62, 0x65 }, // PORTx
        { 0x3a, 0x37, 0x34, 0x31, 0x22, 0x61, 0x64 }, // DDRx
        32*1024,
        { { 0x100, 4096 } },
        AvrAtmega128_64TQFPIoPinInfo,
        arraylen(AvrAtmega128_64TQFPIoPinInfo),
        AvrAtmega128_64TQFPAdcPinInfo,
        arraylen(AvrAtmega128_64TQFPAdcPinInfo),
        1023,
        { 27, 28 },
        17,
        ISA_AVR,
        EnhancedCore128K,
        64,
        0,
        AvrPwmPinInfo64_,
        arraylen(AvrPwmPinInfo64_),
        nullptr,
        0,
        McuSpiInfoATmega64,
        arraylen(McuSpiInfoATmega64),
        McuI2cInfoATmega64,
        arraylen(McuI2cInfoATmega64),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega162 40-PDIP",
        "ATmega162",
        "",
        "",
        "",
        'P',
        { 0x39, 0x36, 0x33, 0x30, 0x25 }, // PINx
        { 0x3b, 0x38, 0x35, 0x32, 0x27 }, // PORTx
        { 0x3a, 0x37, 0x34, 0x31, 0x26 }, // DDRx
        8*1024,
        { { 0x100, 1024 } },
        AvrAtmega162IoPinInfo,
        arraylen(AvrAtmega162IoPinInfo),
        nullptr,
        0,
        0,
        { 0, 0 },
        2, // OC2
        ISA_AVR,
        EnhancedCore128K,
        40,
        0,
        AvrAtmega162PwmPinInfo40_,
        arraylen(AvrAtmega162PwmPinInfo40_),
        nullptr,
        0,
        McuSpiInfoATmega16,
        arraylen(McuSpiInfoATmega16),
        nullptr,
        0,
        {{0,0}}
    },
    {
        "Atmel AVR ATmega32 40-PDIP",
        "ATmega32",
        "m32def",
        "mega32",
        "",
        'P',
        { 0x39, 0x36, 0x33, 0x30 }, // PINx
        { 0x3b, 0x38, 0x35, 0x32 }, // PORTx
        { 0x3a, 0x37, 0x34, 0x31 }, // DDRx
        16*1024,
        { { 0x60, 2048 } },
        AvrAtmega16or32IoPinInfo,
        arraylen(AvrAtmega16or32IoPinInfo),
        AvrAtmega16or32AdcPinInfo,
        arraylen(AvrAtmega16or32AdcPinInfo),
        1023,
        { 14, 15 },
        21, // OC2
        ISA_AVR,
        EnhancedCore128K,
        40,
        0,
        AvrAtmega16_32PwmPinInfo40,
        arraylen(AvrAtmega16_32PwmPinInfo40),
        nullptr,
        0,
        McuSpiInfoATmega16,
        arraylen(McuSpiInfoATmega16),
        McuI2cInfoATmega16,
        arraylen(McuI2cInfoATmega16),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega16 40-PDIP",
        "ATmega16",
        "",
        "",
        "",
        'P',
        { 0x39, 0x36, 0x33, 0x30 }, // PINx
        { 0x3b, 0x38, 0x35, 0x32 }, // PORTx
        { 0x3a, 0x37, 0x34, 0x31 }, // DDRx
        8*1024,
        { { 0x60, 1024 } },
        AvrAtmega16or32IoPinInfo,
        arraylen(AvrAtmega16or32IoPinInfo),
        AvrAtmega16or32AdcPinInfo,
        arraylen(AvrAtmega16or32AdcPinInfo),
        1023,
        { 14, 15 },
        21, // OC2
        ISA_AVR,
        EnhancedCore128K,
        40,
        0,
        AvrAtmega16_32PwmPinInfo40,
        arraylen(AvrAtmega16_32PwmPinInfo40),
        nullptr,
        0,
        McuSpiInfoATmega16,
        arraylen(McuSpiInfoATmega16),
        McuI2cInfoATmega16,
        arraylen(McuI2cInfoATmega16),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega48 28-PDIP",
        "ATmega48",
        "",
        "",
        "",
        'P',
        { 0, 0x23, 0x26, 0x29 }, // PINx
        { 0, 0x25, 0x28, 0x2B }, // PORTx
        { 0, 0x24, 0x27, 0x2A }, // DDRx
        2*1024,
        { { 0x100, 512 } },
        AvrAtmega8IoPinInfo,
        arraylen(AvrAtmega8IoPinInfo),
        AvrAtmega8AdcPinInfo,
        arraylen(AvrAtmega8AdcPinInfo),
        1023,
        { 2, 3 },
        17,
        ISA_AVR,
        EnhancedCore128K,
        28,
        0,
        AvrPwmPinInfo28,
        arraylen(AvrPwmPinInfo28),
        nullptr,
        0,
        McuSpiInfoATmega328,
        arraylen(McuSpiInfoATmega328),
        McuI2cInfoATmega328,
        arraylen(McuI2cInfoATmega328),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega88 28-PDIP",
        "ATmega88",
        "",
        "",
        "",
        'P',
        { 0, 0x23, 0x26, 0x29 }, // PINx
        { 0, 0x25, 0x28, 0x2B }, // PORTx
        { 0, 0x24, 0x27, 0x2A }, // DDRx
        4*1024,
        { { 0x100, 1024 } },
        AvrAtmega8IoPinInfo,
        arraylen(AvrAtmega8IoPinInfo),
        AvrAtmega8AdcPinInfo,
        arraylen(AvrAtmega8AdcPinInfo),
        1023,
        { 2, 3 },
        17,
        ISA_AVR,
        EnhancedCore128K,
        28,
        0,
        AvrPwmPinInfo28,
        arraylen(AvrPwmPinInfo28),
        nullptr,
        0,
        McuSpiInfoATmega328,
        arraylen(McuSpiInfoATmega328),
        McuI2cInfoATmega328,
        arraylen(McuI2cInfoATmega328),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega168 28-PDIP",
        "ATmega168",
        "",
        "",
        "",
        'P',
        { 0, 0x23, 0x26, 0x29 }, // PINx
        { 0, 0x25, 0x28, 0x2B }, // PORTx
        { 0, 0x24, 0x27, 0x2A }, // DDRx
        8*1024,
        { { 0x100, 1024 } },
        AvrAtmega8IoPinInfo,
        arraylen(AvrAtmega8IoPinInfo),
        AvrAtmega8AdcPinInfo,
        arraylen(AvrAtmega8AdcPinInfo),
        1023,
        { 2, 3 },
        17,
        ISA_AVR,
        EnhancedCore128K,
        28,
        0,
        AvrPwmPinInfo28,
        arraylen(AvrPwmPinInfo28),
        nullptr,
        0,
        McuSpiInfoATmega328,
        arraylen(McuSpiInfoATmega328),
        McuI2cInfoATmega328,
        arraylen(McuI2cInfoATmega328),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega328 28-PDIP",
        "ATmega328",
        "m328def",
        "mega328",
        "",
        'P',
        { 0, 0x23, 0x26, 0x29 }, // PINx
        { 0, 0x25, 0x28, 0x2B }, // PORTx
        { 0, 0x24, 0x27, 0x2A }, // DDRx
        16*1024,
        { { 0x100, 2048 } },
        AvrAtmega328IoPinInfo,
        arraylen(AvrAtmega328IoPinInfo),
        AvrAtmega8AdcPinInfo,
        arraylen(AvrAtmega8AdcPinInfo),
        1023,
        { 2, 3 },
        17,
        ISA_AVR,
        EnhancedCore128K,
        28,
        0,
        AvrPwmPinInfo28,
        arraylen(AvrPwmPinInfo28),
        nullptr,
        0,
        McuSpiInfoATmega328,
        arraylen(McuSpiInfoATmega328),
        McuI2cInfoATmega328,
        arraylen(McuI2cInfoATmega328),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega164 40-PDIP",
        "ATmega164",
        "",
        "",
        "",
        'P',
        { 0x20, 0x23, 0x26, 0x29 }, // PINx
        { 0x22, 0x25, 0x28, 0x2B }, // PORTx
        { 0x21, 0x24, 0x27, 0x2A }, // DDRx
        8*1024,
        { { 0x100, 1024 } },
        AvrAtmega164IoPinInfo,
        arraylen(AvrAtmega164IoPinInfo),
        AvrAtmega164AdcPinInfo,
        arraylen(AvrAtmega164AdcPinInfo),
        1023,
        { 14, 15 },
        21,
        ISA_AVR,
        EnhancedCore128K,
        40,
        0,
        AvrPwmPinInfo40_,
        arraylen(AvrPwmPinInfo40_),
        nullptr,
        0,
        McuSpiInfoATmega16,
        arraylen(McuSpiInfoATmega16),
        McuI2cInfoATmega16,
        arraylen(McuI2cInfoATmega16),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega324 40-PDIP",
        "ATmega324",
        "",
        "",
        "",
        'P',
        { 0x20, 0x23, 0x26, 0x29 }, // PINx
        { 0x22, 0x25, 0x28, 0x2B }, // PORTx
        { 0x21, 0x24, 0x27, 0x2A }, // DDRx
        16*1024,
        { { 0x100, 2048 } },
        AvrAtmega164IoPinInfo,
        arraylen(AvrAtmega164IoPinInfo),
        AvrAtmega164AdcPinInfo,
        arraylen(AvrAtmega164AdcPinInfo),
        1023,
        { 14, 15 },
        21,
        ISA_AVR,
        EnhancedCore128K,
        40,
        0,
        AvrPwmPinInfo40_,
        arraylen(AvrPwmPinInfo40_),
        nullptr,
        0,
        McuSpiInfoATmega16,
        arraylen(McuSpiInfoATmega16),
        McuI2cInfoATmega16,
        arraylen(McuI2cInfoATmega16),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega644 40-PDIP",
        "ATmega644",
        "",
        "",
        "",
        'P',
        { 0x20, 0x23, 0x26, 0x29 }, // PINx
        { 0x22, 0x25, 0x28, 0x2B }, // PORTx
        { 0x21, 0x24, 0x27, 0x2A }, // DDRx
        32*1024,
        { { 0x100, 4096 } },
        AvrAtmega164IoPinInfo,
        arraylen(AvrAtmega164IoPinInfo),
        AvrAtmega164AdcPinInfo,
        arraylen(AvrAtmega164AdcPinInfo),
        1023,
        { 14, 15 },
        21,
        ISA_AVR,
        EnhancedCore128K,
        40,
        0,
        AvrPwmPinInfo40_,
        arraylen(AvrPwmPinInfo40_),
        nullptr,
        0,
        McuSpiInfoATmega16,
        arraylen(McuSpiInfoATmega16),
        McuI2cInfoATmega16,
        arraylen(McuI2cInfoATmega16),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega1284 40-PDIP",
        "ATmega1284",
        "",
        "",
        "",
        'P',
        { 0x20, 0x23, 0x26, 0x29 }, // PINx
        { 0x22, 0x25, 0x28, 0x2B }, // PORTx
        { 0x21, 0x24, 0x27, 0x2A }, // DDRx
        64*1024,
        { { 0x100, 16384 } },
        AvrAtmega164IoPinInfo,
        arraylen(AvrAtmega164IoPinInfo),
        AvrAtmega164AdcPinInfo,
        arraylen(AvrAtmega164AdcPinInfo),
        1023,
        { 14, 15 },
        21,
        ISA_AVR,
        EnhancedCore128K,
        40,
        0,
        AvrPwmPinInfo40_,
        arraylen(AvrPwmPinInfo40_),
        nullptr,
        0,
        McuSpiInfoATmega16,
        arraylen(McuSpiInfoATmega16),
        McuI2cInfoATmega16,
        arraylen(McuI2cInfoATmega16),
        {{0,0}}
    },
    {
        "Atmel AVR ATmega8 32-Pin packages", //char            *mcuName;
        "ATmega8",
        "m8def", // "iom8"
        "mega8",
        "",
        'P',                                 //char             portPrefix;
        { 0, 0x36, 0x33, 0x30 }, // PINx  //DWORD            inputRegs[MAX_IO_PORTS]; // A is 0, J is 9
        { 0, 0x38, 0x35, 0x32 }, // PORTx //DWORD            outputRegs[MAX_IO_PORTS];
        { 0, 0x37, 0x34, 0x31 }, // DDRx  //DWORD            dirRegs[MAX_IO_PORTS];
        4*1024,                              //DWORD            flashWords;
        { { 0x60, 1024 } },                  //{DWORD start; int len;} ram[MAX_RAM_SECTIONS];
        AvrAtmega8IoPinInfo32,               //McuIoPinInfo    *pinInfo;
        arraylen(AvrAtmega8IoPinInfo32),     //int              pinCount;
        AvrAtmega8AdcPinInfo32,              //McuAdcPinInfo   *adcInfo;
        arraylen(AvrAtmega8AdcPinInfo32),    //int              adcCount;
        1023,                                //int              adcMax;
        { 30, 31 },                          //{int rxPin; int txPin;} uartNeeds;
        15,// OC2                            //int              pwmNeedsPin;
        ISA_AVR,                             //int              whichIsa;
        EnhancedCore8K,                      //AvrFamily        Family;
        0,                                   //DWORD            configurationWord;
        32,
//      { 32, 1 }, // INT0, INT1             //int int0PinA; int int1PinA;} QuadEncodNeeds;
//      AvrAtmega8ExtIntPinInfo32,
//      arraylen(AvrAtmega8ExtIntPinInfo32),
        AvrPwmPinInfo32_,
        arraylen(AvrPwmPinInfo32_),
        AvrExtIntPinInfo32,
        arraylen(AvrExtIntPinInfo32),
        nullptr,
        0,
        nullptr,
        0,
        {{0,0}}
    },
    {
        "Atmel AVR ATmega8 28-PDIP",
        "ATmega8",
        "m8def",
        "mega8",
        "",
        'P',
        { 0, 0x36, 0x33, 0x30 }, // PINx     (but there is no xxxA)
        { 0, 0x38, 0x35, 0x32 }, // PORTx
        { 0, 0x37, 0x34, 0x31 }, // DDRx
        4*1024,
        { { 0x60, 1024 } },
        AvrAtmega8IoPinInfo28,
        arraylen(AvrAtmega8IoPinInfo28),
        AvrAtmega8AdcPinInfo,
        arraylen(AvrAtmega8AdcPinInfo),
        1023,
        { 2, 3 },
        17,
        ISA_AVR,
        EnhancedCore8K,
        28,
        0,
        AvrPwmPinInfo28_,
        arraylen(AvrPwmPinInfo28_),
        nullptr,
        0,
        McuSpiInfoATmega8,
        arraylen(McuSpiInfoATmega8),
        McuI2cInfoATmega8,
        arraylen(McuI2cInfoATmega8),
            {{0,0}}
    },
//===========================================================================
    {
        "Microchip PIC16F628 18-PDIP or 18-SOIC",
        "PIC16F628",
        "P16F628",
        "P16F628",
        "PIC16F628",
        'R',
        { 0x05, 0x06 }, // PORTx
        { 0x05, 0x06 }, // PORTx
        { 0x85, 0x86 }, // TRISx
        2048,
        { { 0x20, 96 }, { 0xA0, 80 }, { 0x120, 48 } },
        Pic18PinIoInfo,
        arraylen(Pic18PinIoInfo),
        nullptr,
        0,
        0,
        { 7, 8 },
        0,
        ISA_PIC16,
        MidrangeCore14bit,
        18,
        // code protection off, data code protection off, LVP disabled,
        // BOD reset enabled, RA5/nMCLR is _MCLR, PWRT enabled, WDT disabled,
        0x3f62, // HS oscillator, _MCLR
//      0x3f42, // HS oscillator, RA5 pin function is digital Input
//      0x3F70, // INTOSC oscillator, _MCLR
//      0x3F50, // INTOSC oscillator, RA5 pin function is digital Input
            /*
            (1 << 13) | // Code protection off,
            (1 <<  8) | // Data memory code protection off,
            (0 <<  7) | // LVP disabled, RB4/PGM is digital I/O,
            (1 <<  6) | // BOR reset enabled,
//          (0 <<  5) | // RA5/_MCLR is RA5, RA5 pin function is digital Input,
            (1 <<  5) | // RA5/_MCLR/Vpp pin function is _MCLR
            (0 <<  3) | // PWRT enabled,
            (0 <<  2) | // WDT disabled,
//          (1 <<  2) | // WDT enabled,
            (2 <<  0),  // HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
//       (0x10 <<  0),  // INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN
            */
        PicPwmPinInfo18,
        arraylen(PicPwmPinInfo18),
        PicExtIntPinInfo18,
        arraylen(PicExtIntPinInfo18),
        nullptr ,
        0,
        nullptr,
        0,
        {{0,0}}
    },
    {
        "Microchip PIC16F88 18-PDIP or 18-SOIC",
        "PIC16F88",
        "P16F88",
        "P16F88",
        "PIC16F88",
        'R',
        { 0x05, 0x06 }, // PORTx
        { 0x05, 0x06 }, // PORTx
        { 0x85, 0x86 }, // TRISx
        4096,
        { { 0x20, 96 }, { 0xA0, 80 }, { 0x120, 48 } },
        Pic16F88PinIoInfo,
        arraylen(Pic16F88PinIoInfo),
        Pic16F88AdcPinInfo,
        arraylen(Pic16F88AdcPinInfo),
        1023,
        { 8, 11 },
        0,
        ISA_PIC16,
        MidrangeCore14bit,
        18,
//          (1 << 17) | // IESO: Internal External Switchover mode enabled
//          (1 << 16) | // FCMEN: Fail-Safe Clock Monitor enabled
            (1 << 13) | // Flash Program Memory Code Protection off
            (0 << 12) | // CCP1 function on RB3 (doesn't matter)
            (1 << 11) | // DEBUG: ICD disabled
            (3 <<  9) | // Flash Program Memory write protection off
            (1 <<  8) | // Data EE Memory Code protection off
            (0 <<  7) | // LVP disabled
            (1 <<  6) | // BOR enabled
            (0 <<  5) | // RA5/nMCLR is RA5
            (0 <<  4) | // FOSC2=0 for osc sel, HS oscillator
            (0 <<  3) | // PWRT enabled
            (0 <<  2) | // WDT disabled
            (2 <<  0),  // HS oscillator
        PicPwmPinInfo18,
        arraylen(PicPwmPinInfo18),
        PicExtIntPinInfo18,
        arraylen(PicExtIntPinInfo18),
        McuSpiInfoPic16F88,
        arraylen(McuSpiInfoPic16F88),
        McuI2cInfoPic16F88,
        arraylen(McuI2cInfoPic16F88),
        {{0,0}}
    },
    {
        "Microchip PIC16F819 18-PDIP or 18-SOIC",
        "PIC16F819",
        "P16F819",
        "P16F819",
        "PIC16F819",
        'R',
        { 0x05, 0x06 }, // PORTx
        { 0x05, 0x06 }, // PORTx
        { 0x85, 0x86 }, // TRISx
        2048,
        { { 0x20, 96 } },
        Pic18PinIoInfo,
        arraylen(Pic18PinIoInfo),
        Pic16F819AdcPinInfo,
        arraylen(Pic16F819AdcPinInfo),
        1023,
        { 0, 0 },
        0,
        ISA_PIC16,
        MidrangeCore14bit,
        18,
            (1 << 13) | // code protect off
            (1 << 12) | // CCP1 on RB2 (doesn't matter, can't use)
            (1 << 11) | // disable debugger
            (3 <<  9) | // flash protection off
            (1 <<  8) | // data protect off
            (0 <<  7) | // LVP disabled
            (1 <<  6) | // BOR enabled
            (0 <<  5) | // nMCLR/RA5 is RA5
            (0 <<  3) | // PWRTE enabled
            (0 <<  2) | // WDT disabled
//          (1 <<  4) | // 100 = INTRC oscillator; port I/O function on both RA6/OSC2/CLKO pin and RA7/OSC1/CLKI pin
            (2 <<  0),  // 010 = HS oscillator
        PicPwmPinInfo18,
        arraylen(PicPwmPinInfo18),
        PicExtIntPinInfo18,
        arraylen(PicExtIntPinInfo18),
        McuSpiInfoPic16F88,
        arraylen(McuSpiInfoPic16F88),
        McuI2cInfoPic16F88,
        arraylen(McuI2cInfoPic16F88),
        {{0,0}}
    },
    {
        "Microchip PIC16F877 40-PDIP",
        "PIC16F877",
        "P16F877",
        "16F877",
        "pic16F877",
        'R',
        { 0x05, 0x06, 0x07, 0x08, 0x09 }, // PORTx
        { 0x05, 0x06, 0x07, 0x08, 0x09 }, // PORTx
        { 0x85, 0x86, 0x87, 0x88, 0x89 }, // TRISx
        8*1024,
        { { 0x20, 96 }, { 0xA0, 80 }, { 0x110, 96 }, { 0x190, 96 } },
        Pic16F877IoPinInfo,
        arraylen(Pic16F877IoPinInfo),
        Pic16F877AdcPinInfo,
        arraylen(Pic16F877AdcPinInfo),
        1023,
        { 26, 25 },
        16,
        ISA_PIC16,
        MidrangeCore14bit,
        40,
        // code protection off, debug off, flash write off, EE code protection
        // off, LVP disabled, BOD enabled, CP off, PWRT enabled, WDT disabled,
        // HS oscillator
        0x3f72,
        PicPwmPinInfo40,
        arraylen(PicPwmPinInfo40),
        PicExtIntPinInfo40,
        arraylen(PicExtIntPinInfo40),
        McuSpiInfoPic16F877,
        arraylen(McuSpiInfoPic16F877),
        McuI2cInfoPic16F877,
        arraylen(McuI2cInfoPic16F877),
        {{0,0}}
    },
    {
        "Microchip PIC16F876 28-PDIP or 28-SOIC",
        "PIC16F876",
        "P16F876",
        "P16F876",
        "PIC16F876",
        'R',
        { 0x05, 0x06, 0x07 }, // PORTx
        { 0x05, 0x06, 0x07 }, // PORTx
        { 0x85, 0x86, 0x87 }, // TRISx
        8*1024,
        { { 0x20, 96 }, { 0xA0, 80 }, { 0x110, 96 }, { 0x190, 96 } },
        Pic16F876IoPinInfo,
        arraylen(Pic16F876IoPinInfo),
        Pic16F876AdcPinInfo,
        arraylen(Pic16F876AdcPinInfo),
        1023,
        { 18, 17 },
        12,
        ISA_PIC16,
        MidrangeCore14bit,
        28,
        // code protection off, debug off, flash write off, EE code protection
        // off, LVP disabled, BOD enabled, CP off, PWRT enabled, WDT disabled,
        // HS oscillator
        0x3f72,
        PicPwmPinInfo28_2,
        arraylen(PicPwmPinInfo28_2),
        PicExtIntPinInfo28,
        arraylen(PicExtIntPinInfo28),
        McuSpiInfoPic16F876,
        arraylen(McuSpiInfoPic16F876),
        McuI2cInfoPic16F876,
        arraylen(McuI2cInfoPic16F876),
        {{0,0}}
    },
    {
        "Microchip PIC16F887 40-PDIP",
        "PIC16F887",
        "P16F887",
        "P16F887",
        "PIC16F887",
        'R',
        { 0x05, 0x06, 0x07, 0x08, 0x09 }, // PORTx
        { 0x05, 0x06, 0x07, 0x08, 0x09 }, // PORTx
        { 0x85, 0x86, 0x87, 0x88, 0x89 }, // TRISx
        8*1024,
        { { 0x20, 96 }, { 0xA0, 80 }, { 0x120, 80 }, { 0x1a0, 80 } },
        Pic16F887IoPinInfo,
        arraylen(Pic16F887IoPinInfo),
        Pic16F887AdcPinInfo,
        arraylen(Pic16F887AdcPinInfo),
        1023,
        { 26, 25 },
        16,
        ISA_PIC16,
        MidrangeCore14bit,
        40,
            (3 << (9+16)) | // flash write protection off
            (0 << (8+16)) | // BOR at 2.1 V
            (1 << 13) |     // ICD disabled
            (0 << 12) |     // LVP disabled
            (0 << 11) |     // fail-safe clock monitor disabled
            (0 << 10) |     // internal/external switchover disabled
            (3 <<  8) |     // brown-out detect enabled
            (1 <<  7) |     // data code protection disabled
            (1 <<  6) |     // code protection disabled
            (1 <<  5) |     // nMCLR enabled
            (0 <<  4) |     // PWRTE enabled
            (0 <<  3) |     // WDTE disabled
            (2 <<  0),      // HS oscillator
        PicPwmPinInfo40,
        arraylen(PicPwmPinInfo40),
        PicExtIntPinInfo40,
        arraylen(PicExtIntPinInfo40),
        McuSpiInfoPic16F877,
        arraylen(McuSpiInfoPic16F877),
        McuI2cInfoPic16F877,
        arraylen(McuI2cInfoPic16F877),
        {{0,0}}
    },
    {
        "Microchip PIC16F886 28-PDIP or 28-SOIC",
        "PIC16F886",
        "P16F886",
        "P16F886",
        "PIC16F886",
        'R',
        { 0x05, 0x06, 0x07, 0, 0x09 }, // PORTx = A B C E
        { 0x05, 0x06, 0x07, 0, 0x09 }, // PORTx
        { 0x85, 0x86, 0x87, 0, 0x89 }, // TRISx
        8*1024,
        { { 0x20, 96 }, { 0xA0, 80 }, { 0x120, 80 }, { 0x1a0, 80 } },
        Pic28Pin_SPDIP_SOIC_SSOP,
        arraylen(Pic28Pin_SPDIP_SOIC_SSOP),
        Pic16F886AdcPinInfo,
        arraylen(Pic16F886AdcPinInfo),
        1023,
        { 18, 17 },
        12,
        ISA_PIC16,
        MidrangeCore14bit,
        28,
         (0x38 << (8+16)) | // Unimplemented: Read as 1
            (3 << (9+16)) | // flash write protection off
            (0 << (8+16)) | // BOR at 2.1 V
         (0xff << 16) |     // Unimplemented: Read as 1
            (1 << 13) |     // ICD disabled
            (0 << 12) |     // LVP disabled
            (0 << 11) |     // fail-safe clock monitor disabled
            (0 << 10) |     // internal/external switchover disabled
            (3 <<  8) |     // brown-out detect enabled
            (1 <<  7) |     // data code protection disabled
            (1 <<  6) |     // code protection disabled
            (1 <<  5) |     // nMCLR enabled
            (0 <<  4) |     // PWRTE enabled
            (0 <<  3) |     // WDTE disabled
            (2 <<  0),      // HS oscillator
        PicPwmPinInfo28_2,
        arraylen(PicPwmPinInfo28_2),
        PicExtIntPinInfo28,
        arraylen(PicExtIntPinInfo28),
        McuSpiInfoPic16F876,
        arraylen(McuSpiInfoPic16F876),
        McuI2cInfoPic16F876,
        arraylen(McuI2cInfoPic16F876),
        {{0,0}}
    },
    {
        "Microchip PIC12F683 8-pin packages",
        "PIC12F683",
        "P12F683",
        "P12F683",
        "PIC12F683",
        'G',
//        A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x05}, // PORTx = GPIO
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x05}, // PORTx
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x85}, // TRISx
        2*1024,
        { { 0x20, 96 }, { 0xA0, 32 } },
        Pic8Pin,
        arraylen(Pic8Pin),
        Pic8PinAdcPinInfo,
        arraylen(Pic8PinAdcPinInfo),
        1024,
        { },
        0,
        ISA_PIC16,
        MidrangeCore14bit,
        8,
        0x3FC4,
        /*
            ($7f <<7) |
            (1 <<  6) |     // BOD enabled
            (0 <<  5) |     // _MCLR disabled
            (0 <<  4) |     // PWRT enabled
            (0 <<  3) |     // WDTE disabled
            (4 <<  0),      // 100 = INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function on GP5/OSC1/CLKIN
        */
        NULL,
        0
    },
    {
        "Microchip PIC10F200 6-SOT",
        "PIC10F200",
        "P10F200",
        "P10F200",
        "PIC10F200",
        'G',
//        A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x06 }, // PORTx = GPIO
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x06 }, // PORTx
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x06 }, // TRISx
        256-1, //Location 00FFh contains the internal clock oscillator
               //calibration value. This value should never be overwritten.
        { { 0x10, 16 } },
        Pic6Pin_SOT23,
        arraylen(Pic6Pin_SOT23),
        nullptr,
        0,
        0,
        { },
        0,
        ISA_PIC16,
        BaselineCore12bit,
        6,
            (0 <<  4) |     // nMCLR disabled
            (1 <<  3) |     // Code protection disabled
            (0 <<  2) |     // WDTE disabled
            (0 <<  1) |     //
            (0 <<  0),      //
        nullptr,
        0,
        nullptr,
        0,
        nullptr,
        0,
        nullptr,
        0,
        {{0,0}}
    },
//===========================================================================
    {
        "ESP8266",
        "",
        "",
        "",
        "",
        'I',
        { 0x20 }, // PINx
        { 0x22 }, // PORTx
        { 0x21 }, // DDRx
        128 * 1024,
        { { 0x200, 8192 } },
        ESP8266IoPinInfo,
        arraylen(ESP8266IoPinInfo),
        ESP8266AdcPinInfo,
        arraylen(ESP8266AdcPinInfo),
        1023,
        { 21 , 22 },
        0,
        ISA_ESP8266,
        ESP8266Core,
        22,
        0,
        NULL, //ESP8266PwmPinInfo,
        0, //arraylen(ESP8266PwmPinInfo),
    },
//===========================================================================
    {   ///// Added by JG               // A Completer
        #define BASE_A 0x40020000
        #define BASE_B 0x40020400
        #define BASE_C 0x40020800
        #define BASE_D 0x40020C00
        #define BASE_E 0x40021000
        #define BASE_F 0x40021400
        #define BASE_G 0x40021800
        "St ARM STM32F40X 144-LQFP",                    // Nom
        "STM32F40X",                                    // Liste d'alias
        "",
        "",
        "",
        'P',                                        // Prefixe ports
        { BASE_A+0x14, BASE_B+0x14, BASE_C+0x14, BASE_D+0x14, BASE_E+0x14, BASE_F+0x14, BASE_G+0x18, 0, 0, 0, 0},   // Adresses registres In
        { BASE_A+0x18, BASE_B+0x18, BASE_C+0x18, BASE_D+0x18, BASE_E+0x18, BASE_F+0x18, BASE_G+0x18, 0, 0, 0, 0},   // Adresses registres Out
        { BASE_A, BASE_B, BASE_C, BASE_D, BASE_E, BASE_F, BASE_G, 0, 0, 0, 0},                                      // Adresses registres Dir
        512 * 1024,                                 // 1 MO Flash
        { { 0x0800000, 0x100000 } },                // debut + taille
        ArmSTM32F40X_144LQFPIoPinInfo,              // Pin info
        arraylen(ArmSTM32F40X_144LQFPIoPinInfo),    // Nb broches (declarees)
        ArmSTM32F40X_144LQFPAdcPinInfo,             // Adc info
        9,                                          // Nb Adc
        4095,                                       // Adc valeur Maxi                          // 12 bits
        {97, 96},                                   // UART RX + TX (UART 6)                    // RXn + TXn in I/O definition
        0,                                          // PWM default Pin
        ISA_ARM,                                    // Type
        NOTHING,                                    // Core
        144,                                        // Nb de broches
        0,                                          // For PIC but may be used for ARM
        ArmSTM32F40X_144LQFPPwmPinInfo,             // Pwm info
        arraylen(ArmSTM32F40X_144LQFPPwmPinInfo),   // Pwm info size
        nullptr,                                    // ExtInt info
        0,                                          // ExtInt info size
        ArmSTM32F40X_144LQFPMcuSpiInfo,             // SPI info
        arraylen(ArmSTM32F40X_144LQFPMcuSpiInfo),   // SPI info size
        ArmSTM32F40X_144LQFPMcuI2cInfo,             // I2C info
        arraylen(ArmSTM32F40X_144LQFPMcuI2cInfo),   // I2C info size
        {{0,0}}
    },

//===========================================================================
    {
        "Controllino Maxi / Ext bytecode",
        "ControllinoMaxi",
        "",
        "",
        "",
        'P',
        { 0x20, 0x23, 0x26, 0x29, 0x2C, 0x2F, 0x32, 0x100, 0x103, 0x106, 0x109 }, // PINx
        { 0x22, 0x25, 0x28, 0x2B, 0x2E, 0x32, 0x34, 0x102, 0x105, 0x108, 0x10B }, // PORTx
        { 0x21, 0x24, 0x27, 0x2A, 0x2D, 0x30, 0x33, 0x101, 0x104, 0x107, 0x10A }, // DDRx
        128 * 1024,
        { { 0x200, 8192 } },
        ControllinoMaxiIoPinInfo,
        arraylen(ControllinoMaxiIoPinInfo),
        ControllinoMaxiAdcPinInfo,
        arraylen(ControllinoMaxiAdcPinInfo),
        1023,
        { 2 , 3 },
        23,
        ISA_XINTERPRETED,
        EnhancedCore4M,
        100,
        0,
        ControllinoMaxiPwmPinInfo,
        arraylen(ControllinoMaxiPwmPinInfo),
        nullptr,
        0,
        nullptr,
        0,
        nullptr,
        0,
        {{0,0}}
    },
    {
        "PC LPT COM",
        "PcLptCom",
        "",
        "",
        "",
        'L', // PC LPT & COM support
        { 0x00 },
        { 0x00 },
        { 0x00 },
        0,
        { { 0x00, int(0xffffff) } },
        PcCfg,
        arraylen(PcCfg),
        nullptr,
        0,
        0,
        { 0, 0 },
        0,
        ISA_PC,
        PC_LPT_COM,
        0,
        0,
        nullptr,
        0,
        nullptr,
        0,
        nullptr,
        0,
        nullptr,
        0,
        {{0,0}}
    },
};

// clang-format on

std::vector<McuIoInfo> SupportedMcus(SupportedMcus_, SupportedMcus_ + arraylen(SupportedMcus_));

#endif //__MCUTABLE_H__
