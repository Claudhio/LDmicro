
	Tester LdMicro sur microcontrôleurs ARM STM32 :
	_______________________________________________


	Si tout est bien configuré, il est possible de générer des fichiers C,
	puis un fichier hex et de le transférer dans la cible sans quitter ldmicro



1)	Installer EmIde (par exemple) ou installer directement un compilateur
	arm-gcc pour windows 

2)	Copier l'exécutable LdMicro, buildArm.bat et flashMCU.bat dans un même dossier
	Copier au même endroit le dossier LIBRARIES_FOR et son contenu
	Vérifier que la version des librairies correspond à celle de LdMicro

3)	Editer buildArm.bat (Clic droit + Modifier) et modifier GCCPATH pour pointer 
	sur le répertoire d'installation d'arm-gcc

	Editer ensuite si nécessaire FlashMCU.bat (Clic droit + Modifier)
	Selon l'émulateur utilisé, vous pouvez alors modifier les instructions
	qui vont charger le fichier hex dans la cible
	Sinon, il est toujours possible de flasher la cible manuellement
	à partir du fichier hex généré par LdMicro

4)	Créer un ladder avec LdMicro dans un dossier

5)	Compiler le ladder avec "Compiler en ARM-GCC"
	et générer le fichier C proposé dans le même dossier que le ladder (.ld) 
	avec le même nom (.c)
	
	Cela génère aussi un fichier header (.h) et un autre header ladder.h
	Avec les librairies fournies, ceci constitue un projet C prêt à l'emploi

6)	Lancer "Générer la solution C" depuis LdMicro pour générer le fichier hex
	dans le dossier "bin" à partir des fichiers précédents

	Observer la fenêtre de commande ; il ne devrait pas y avoir d'erreur
	Les librairies sont automatiquement recopiées (la première fois)
	dans le sous-dossier "lib" où elles peuvent ensuite être adaptées
	Les fichiers intermédiaires sont générés dans le sous-dossier "obj"

7)	Charger ce fichier dans la cible, soit automatiquement avec "Lancer FlashMcu"
	soit manuellement à partir du sous-dossier "bin" qui a été créé
	Tester le fichier hex ainsi généré sur la cible...



NB:	Les librairies (dérivées de celles de T. Merjele) ont été testées sur STM32F407
	Le nom de la cible est défini dans ladder.h comme LDTARGET_stm32f40x

	Il est possible d'utiliser plusieurs ADC ou PWM, mais seulement une UART,
	un SPI, et un I2C
	(Mais avec plusieurs périphériques utilisant différents pins SS pour le SPI
	ou différentes adresses pour l'I2C)

NB:	Le SPI doit être nommé "SPI1", "SPI2" or "SPI3" sur ARMs
	Les nouvelles fonctions SPI sont:
	Emission/Reception SPI, qui envoie et/ou reçoit un octet
	Ecriture SPI, qui envoie une chaine alphanumerique sur le SPI sans réception

	La fréquence du SPI est définie comme celle de l'UART dans le panneau de 
	configuration de LdMicro
	Le SPI le fonctionne qu'en mode master, avec la configuration standard

NB:	L'I2C doit être nommé "I2C1", "I2C2" or "I2C3" sur ARMs
	Les nouvelles fonctions I2C sont:
	Réception I2C, pour lire un octet dans un registre du peripherique
	Emission I2C, pour écrire un octet dans un registre du peripherique

	La fréquence I2C est aussi définie dans le panneau de configuration de LdMicro
	L'I2C ne fonctionne également qu'en mode master

NB:	La résolution maximale est utilisée pour les ADC
	La résolution maximale est utilisée pour les PWM et le paramétrage fonctionne
	uniquement en % entre 0 and 100

